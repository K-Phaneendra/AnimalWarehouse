import React from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
import moment from 'moment';
import { coulmnSearch } from '../../../helpers/SearchData';
import '../Dashboard.scss';
import DashboardTable from '../DashboardTable';
import { animalsTableColumns } from '../TableColumns';
import { months } from '../../../data/reusableConstants';
import FormDialog from '../../../components/Modals/FormDialog';
// import OrderAnimalForm from './OrderAnimalForm';
import { createAnimalsData, updateAnimalData } from '../../../actions/animalSpecieActions';
import { handleSnackBar } from '../../../actions/DashboardAction';
import EditAnimalForm from './EditAnimalForm';
import { generateStatusDropDown, generateDropdownFromJson } from '../../../helpers/reusableFunctions';
import CreateAnimalsData from './CreateAnimalsData';

class AnimalsTable extends React.Component {
  constructor() {
    super();
    this.state = {
      cartData: [{}],
      openOrderFormDialog: false,
      disableSubmit: true,
      openCreateAnimalForm: false,
      openEditFormDialog: false,
      selectedRow: [],
      selectedRowForEdit: null,
      openOrderFormDialog2: false,
      arrivalDate: moment(),
      takenFromParents: moment()
    };
  }
  getRenderedAnimalsData = (animals) => {
    console.log(animals);
    // const objectId = '_id';
    const renderedAnimalsData = [];
    let generatedObj = {};
    animals.map(anml => {
      generatedObj = { ...anml };
      // generatedObj[objectId] = anml[objectId];
      // generatedObj.uid = anml.uid;
      // generatedObj.gender = anml.gender;
      // generatedObj.status = anml.status;
      // generatedObj.species = anml.species;
      // generatedObj.subSpezies = anml.subSpezies;
      // generatedObj.groupNumber = anml.groupNumber;
      // generatedObj.weight = anml.weight;
      // generatedObj.regulatoryCode = anml.regulatoryCode;
      // generatedObj.genoTypeMutation = anml.genoTypeMutation;
      // generatedObj.transGen = this.boolToString(anml.transGen);
      generatedObj.takenFromParents = this.getReadableDate(
        anml.takenFromParents
      );
      generatedObj.arrivalDate = this.getReadableDate(anml.arrivalDate);
      // generatedObj.supplier = anml.supplier;
      // generatedObj.origin = anml.origin;
      // generatedObj.statusLog = anml.statusLog;
      renderedAnimalsData.push(generatedObj);
      return null;
    });
    return renderedAnimalsData;
  }
  getReadableDate = (isoformat) => {
    const readable = new Date(isoformat);
    const m = readable.getMonth(); // returns 6
    const d = readable.getDay(); // returns 15
    const y = readable.getFullYear(); // returns 2012
    const mlong = months[m];
    const fulldate = `${mlong} ${d}, ${y}`;
    return fulldate;
  }
  boolToString = (bool) => {
    if (bool) {
      return 'Yes';
    } else if (!bool) {
      return 'No';
    }
    return '';
  }
  handleOrderFormDialog = () =>
    this.setState({ openOrderFormDialog: !this.state.openOrderFormDialog });
  handleEditDialog = () => {
    if (this.state.selectedRow.length === 0) {
      alert('Please select a row');
    } else if (this.state.selectedRow.length === 1) {
      this.setState({ openEditFormDialog: !this.state.openEditFormDialog });
    } else if (this.state.selectedRow.length > 1) {
      alert('Please select a single row to perform edit');
    }
  }
  handleOrderFormDialog2 = () =>
  this.setState({ openOrderFormDialog2: !this.state.openOrderFormDialog2 });
  incrementedCartData = cartData => {
    cartData.push({});
    return cartData;
  };
  incrementCart = () => {
    const { cartData } = this.state;
    const incrementedCartData = this.incrementedCartData(cartData);
    this.setState({ cartData: incrementedCartData });
  };
  selectSpecies = (e) => {
    const { cartData } = this.state;
    // cartData.map((values, index) => {
    //   if (index === count) {
    //     // eslint-disable-next-line
    //     values.specie = e.value;
    //     // eslint-disable-next-line
    //     values.selectedSpecie = e;
    //   }
    //   return null;
    // });
    const key = '_id';
    // console.log(cartData, e);
    cartData.species = e[key];
    this.setState({ cartData });
  };
  selectSubSpecies = (e) => {
    // console.log(e);
    const { cartData } = this.state;
    const key = '_id';
    // console.log(cartData, e);
    cartData.subSpecies = e[key];
    this.setState({ cartData });
  }
  selectStatus = (e) => {
    // const id = '_id';
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.status = e.value;
    selectedRowForEdit.statusObj = e;
    this.setState({ selectedRowForEdit });
  };
  selectStatusForOrder = (e) => {
    const { cartData } = this.state;
    const key = '_id';
    // console.log(cartData, e);
    cartData.status = e[key];
    this.setState({ cartData });
  }
  textOnBlur = (e) => {
    const { cartData } = this.state;
    // cartData.map((values, index) => {
    //   if (index === count) {
    //     // eslint-disable-next-line
    //     values[e.target.name] = e.target.value;
    //   }
    //   return null;
    // });
    // console.log(e.target.name, e.target.value);
    cartData[e.target.name] = e.target.value;
    this.setState({ cartData });
  };
  selectGender = (e) => {
    const { cartData } = this.state;
    // cartData.map((values, index) => {
    //   if (index === count) {
    //     // eslint-disable-next-line
    //     values.gender = e.value;
    //     // eslint-disable-next-line
    //     values.selectedGender = e;
    //   }
    //   return null;
    // });
    // console.log(cartData, e);
    cartData.gender = e.value;
    this.setState({ cartData });
  };
  // selectTransGender = (e) => {
  //   const { cartData } = this.state;
  //   console.log(e);
  //   console.log(cartData, e);
  //   cartData.isTransGender = e.value;
  //   this.setState({ cartData });
  // }
  decrementCart = count => {
    const { cartData } = this.state;
    const decrementedCart = [];
    cartData.map((values, index) => {
      if (count === index) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    if (decrementedCart.length === 0) {
      decrementedCart.push({});
    }
    this.setState({ cartData: decrementedCart });
  };
  submitOrderAnimalForm = () => {
    const { cartData } = this.state;
    console.log(cartData);
    // const orderSubmitDetails = {};
    // const animalsInCart = [];
    // let cartObj = {};
    // cartData.map(cartValues => {
    //   cartObj = {};
    //   cartObj.animalSpecie = cartValues.specie;
    //   cartObj.gender = cartValues.gender;
    //   cartObj.quantity = cartValues.quantity;
    //   cartObj.weight = cartValues.weight;
    //   cartObj.color = cartValues.color;
    //   animalsInCart.push(cartObj);
    //   return null;
    // });
    // orderSubmitDetails.orderedBy = this.props.loggedInUser.id;
    // orderSubmitDetails.animals = animalsInCart;
    // orderSubmitDetails.orderedDate = new Date();
    const cartObj = {
      companyId: Number(cartData.companyId),
      governmentId: Number(cartData.governmentId),
      gender: cartData.gender,
      species: cartData.species,
      subSpezies: cartData.subSpecies,
      quantity: Number(cartData.quantity),
      weight: cartData.weight,
      regulatoryCode: cartData.regulatoryCode,
      genoTypeMutation: cartData.genoTypeMutation,
      origin: cartData.origin,
      boxNumber: cartData.boxNumber,
      roomNumber: cartData.roomNumber,
      status: cartData.status,
      arrivalDate: cartData.arrivalDate,
      takenFromParents: cartData.takenFromParents
    };
    console.log(cartObj);
    this.props.dispatch(createAnimalsData(cartObj, this.callBack2));
    // this.props.dispatch(submitOrder(orderSubmitDetails, this.callBack));
  };
  callBack = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.handleEditDialog();
    }
  };
  callBack2 = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.handleOrderFormDialog2();
    }
  };
  textFieldOnBlur = e => {
    this.setState({ [e.target.name]: e.target.value });
  };
  selectedRows = (data) => {
    this.setState({ selectedRow: data });
    const key = '_id';
    let obj = {};
    if (data.length === 1) {
      this.props.displayAnimalsData.map(vals => {
        if (vals[key] === data[0]) {
          let roomNumber = 0;
          if (vals.roomNumber) {
            roomNumber = vals.roomNumber;
          }
          let boxNumber = 0;
          if (vals.boxNumber) {
            boxNumber = vals.boxNumber;
          }
          let companyId = 0;
          if (vals.companyId) {
            companyId = vals.companyId;
          }
          let governmentId = 0;
          if (vals.governmentId) {
            governmentId = vals.governmentId;
          }
          let groupNumber = 0;
          if (vals.groupNumber) {
            groupNumber = vals.groupNumber;
          }
          obj = {
            rowId: vals[key],
            arrivalDate: vals.arrivalDate,
            boxNumber,
            gender: vals.gender,
            genoTypeMutation: vals.genoTypeMutation,
            origin: vals.origin,
            regulatoryCode: vals.regulatoryCode,
            roomNumber,
            species: vals.species,
            subSpecies: vals.subSpecies,
            supplier: vals.supplier,
            takenFromParents: vals.takenFromParents,
            transGen: vals.transGen,
            uid: vals.uid,
            companyId,
            governmentId,
            groupNumber,
            weight: vals.weight,
            statusLog: vals.statusLog
          };
        }
        return null;
      });
      this.setState({ selectedRowForEdit: obj });
    }
  }
  editTextOnBlur = (e) => {
    const { selectedRowForEdit } = this.state;
    if (e.target.type === 'text') {
      // eslint-disable-next-line
      selectedRowForEdit[e.target.name] = e.target.value;
    } else {
      // eslint-disable-next-line
      selectedRowForEdit[e.target.name] = e.target.value;
    }
    this.setState({ selectedRowForEdit, disableSubmit: false });
  };
  submitEditAnimalForm = () => {
    const { selectedRowForEdit } = this.state;
    const id = selectedRowForEdit.rowId;
    const key = '_id';
    const obj = {
      species: selectedRowForEdit.species[key],
      subSpecies: selectedRowForEdit.subSpecies,
      uid: selectedRowForEdit.uid,
      gender: selectedRowForEdit.gender,
      genoTypeMutation: selectedRowForEdit.genoTypeMutation,
      boxNumber: selectedRowForEdit.boxNumber[key],
      arrivalDate: selectedRowForEdit.arrivalDate,
      origin: selectedRowForEdit.origin,
      regulatoryCode: selectedRowForEdit.regulatoryCode,
      roomNumber: selectedRowForEdit.roomNumber[key],
      status: selectedRowForEdit.status,
      statusLog: selectedRowForEdit.statusLog,
      supplier: selectedRowForEdit.supplier[key],
      transGen: selectedRowForEdit.transGen,
      takenFromParents: selectedRowForEdit.takenFromParents,
      weight: Number(selectedRowForEdit.weight)
    };
    // console.log(obj, id);
    this.props.dispatch(updateAnimalData(obj, id, this.callBack));
  }
  handleArrivalDate = (date) => {
    console.log(moment(date));
    const { cartData } = this.state;
    cartData.arrivalDate = moment(date).format('DD-MMM-YYYY');
    this.setState({ cartData });
    this.setState({ arrivalDate: moment(date) });
  }
  handleTakenDate = date => {
    console.log(moment(date));
    const { cartData } = this.state;
    cartData.takenFromParents = moment(date).format('DD-MMM-YYYY');
    this.setState({ cartData });
    this.setState({ takenFromParents: moment(date) });
  }
  handleRoomNumber = e => {
    console.log(e);
    const { cartData } = this.state;
    const key = '_id';
    // console.log(cartData, e);
    cartData.roomNumber = e[key];
    this.setState({ cartData });
  }
  handleBoxNumber = e => {
    console.log(e);
    const { cartData } = this.state;
    const key = '_id';
    // console.log(cartData, e);
    cartData.boxNumber = e[key];
    this.setState({ cartData });
  }
  render() {
    const { cartData, selectedRowForEdit, arrivalDate, takenFromParents } = this.state;
    let { disableSubmit } = this.state;
    const { displayAnimalsData, animals, animalSpecies, animalStatuses, subSpecies, rooms, boxes } = this.props;
    const renderedAnimalsData = this.getRenderedAnimalsData(displayAnimalsData);
    const statusDropDown = generateStatusDropDown(animalStatuses);
    const subSpeciesOptions = generateDropdownFromJson(subSpecies);
    const roomNumber = generateDropdownFromJson(rooms);
    const boxNumber = generateDropdownFromJson(boxes);
    // if (
    //   cartData[0].specie &&
    //   cartData[0].quantity &&
    //   cartData[0].weight &&
    //   cartData[0].color &&
    //   cartData[0].gender
    // ) {
    //   disableSubmit = false;
    // }
    console.log(selectedRowForEdit, 'selectedRowForEdit');
    console.log(cartData, 'cartData');
    if (
      // cartData[0].specie &&
      // cartData[0].quantity &&
      // cartData[0].weight &&
      // cartData[0].color &&
      cartData.gender
    ) {
      disableSubmit = false;
    }
    // if (selectedRowForEdit !== null) {
    //   if (
    //     selectedRowForEdit.uid &&
    //     selectedRowForEdit.name &&
    //     selectedRowForEdit.gender &&
    //     selectedRowForEdit.weight &&
    //     selectedRowForEdit.roomNumber &&
    //     selectedRowForEdit.boxNumber &&
    //     selectedRowForEdit.status
    //   ) {
    //     disableSubmit = false;
    //   }
    // }
    return (
      <div>
        <Row className="margin-bottom10">
          <Col lg={3} md={4} className="action-wrap">
            <ul className="action-buttons">
              {/* <li>
                <i
                  className="fas fa-plus"
                  aria-hidden="true"
                  onClick={this.handleOrderFormDialog}
                  title="Add Animals"
                />
              </li> */}
              <li>
                <i
                  className="fas fa-plus"
                  aria-hidden="true"
                  onClick={this.handleOrderFormDialog2}
                  title="Add Animals"
                />
              </li>
              <li>
                <i
                  className="far fa-edit"
                  aria-hidden="true"
                  onClick={this.handleEditDialog}
                  title="Edit Animals"
                />
              </li>
            </ul>
          </Col>
        </Row>
        {/* <FormDialog
          open={this.state.openOrderFormDialog}
          onClose={this.handleOrderFormDialog}
          formTitle="Add Animal To Warehouse"
          formContent={
            <OrderAnimalForm
              animalSpecies={animalSpecies}
              cartData={cartData}
              incrementCart={this.incrementCart}
              selectSpecies={this.selectSpecies}
              textOnBlur={this.textOnBlur}
              selectGender={this.selectGender}
              decrementCart={this.decrementCart}
              toggleCreateAnimalForm={() =>
                this.setState({
                  openCreateAnimalForm: !this.state.openCreateAnimalForm
                })
              }
              openCreateAnimalForm={this.state.openCreateAnimalForm}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.submitOrderAnimalForm}
        /> */}
        <FormDialog
          open={this.state.openOrderFormDialog2}
          onClose={this.handleOrderFormDialog2}
          formTitle="Add Animal To Warehouse"
          formContent={
            <CreateAnimalsData
              selectGender={this.selectGender}
              animalSpecies={animalSpecies}
              selectSpecies={this.selectSpecies}
              subSpeciesOptions={subSpeciesOptions}
              selectSubSpecies={this.selectSubSpecies}
              cartData={cartData}
              textOnBlur={this.textOnBlur}
              // selectTransGender={this.selectTransGender}
              statusDropDown={statusDropDown}
              arrivalDate={arrivalDate}
              takenFromParents={takenFromParents}
              handleDate={this.handleDate}
              selectStatusForOrder={this.selectStatusForOrder}
              roomNumber={roomNumber}
              boxNumber={boxNumber}
              handleRoomNumber={this.handleRoomNumber}
              handleBoxNumber={this.handleBoxNumber}
              handleArrivalDate={this.handleArrivalDate}
              handleTakenDate={this.handleTakenDate}
              // incrementCart={this.incrementCart}
              // decrementCart={this.decrementCart}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.submitOrderAnimalForm}
        />
        <FormDialog
          open={this.state.openEditFormDialog}
          onClose={this.handleEditDialog}
          formTitle="Edit Animal Warehouse Data"
          formContent={
            <EditAnimalForm
              data={selectedRowForEdit}
              statusData={statusDropDown}
              selectStatus={this.selectStatus}
              editTextOnBlur={this.editTextOnBlur}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.submitEditAnimalForm}
        />
        <DashboardTable
          rows={renderedAnimalsData}
          columns={animalsTableColumns}
          // isSelected={this.isSelected}
          // onRowClick={this.handleRowClick}
          // onRowSelect={this.handleRowSelect}
          // toggleSelection={this.handleRowClick}
          // pivotBy={this.state.groupBy.map(option => option.value)}
          // selection={this.state.selection}
          // selectAll={this.state.selectAll}
          coulmnSearch={coulmnSearch}
          filterable={false}
          tableData={animals}
          selectedRows={this.selectedRows}
        />
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    loggedInUser: state.login.loggedInUser,
    animalSpecies: state.animalsReducer.animalSpecies,
    animalStatuses: state.animalsReducer.animalStatuses,
    subSpecies: state.animalsReducer.subSpecies,
    rooms: state.animalsReducer.rooms,
    boxes: state.animalsReducer.boxes
  };
}

export default connect(mapStateToProps)(AnimalsTable);
