import React from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
import { coulmnSearch } from '../../../helpers/SearchData';
import '../Dashboard.scss';
import DashboardTable from '../DashboardTable';
import { animalsTableColumns } from '../TableColumns';
import { months } from '../../../data/reusableConstants';
import FormDialog from '../../../components/Modals/FormDialog';
import AnimalsTableAddForm from './AnimalsTableAddForm';
import OrderAnimalForm from './OrderAnimalForm';
import { submitOrder } from '../../../actions/animalSpecieActions';
import { SnackBar } from '../../../components/SnackBar';
import { createAnimal } from '../../../actions/animalActions';
// import PickAnimalsForm from './PickAnimalsForm';

class AnimalsTable extends React.Component {
  constructor() {
    super();
    this.state = {
      openFormDialog: false,
      addSubmitClicked: false,
      // openPickAnimalsFormDialog: false,
      openOrderFormDialog: false,
      orderedAnimals: [],
      orderedGenders: [],
      orderedinputFields: [],
      cartCount: 1,
      openSnackBar: false,
      msg: '',
      uid: '',
      weight: '',
      regulatoryCode: '',
      genoTypeMutation: '',
      origin: '',
      species: '',
      gender: ''
    };
  }
  getRenderedAnimalsData(animals) {
    // const objectId = '_id';
    const renderedAnimalsData = [];
    let generatedObj = {};
    animals.map(anml => {
      generatedObj = { ...anml };
      // generatedObj[objectId] = anml[objectId];
      // generatedObj.uid = anml.uid;
      // generatedObj.gender = anml.gender;
      // generatedObj.status = anml.status;
      // generatedObj.species = anml.species;
      // generatedObj.subSpezies = anml.subSpezies;
      // generatedObj.groupNumber = anml.groupNumber;
      // generatedObj.weight = anml.weight;
      // generatedObj.regulatoryCode = anml.regulatoryCode;
      // generatedObj.genoTypeMutation = anml.genoTypeMutation;
      generatedObj.transGen = this.boolToString(anml.transGen);
      generatedObj.takenFromParents = this.getReadableDate(
        anml.takenFromParents
      );
      generatedObj.arrivalDate = this.getReadableDate(anml.arrivalDate);
      // generatedObj.supplier = anml.supplier;
      // generatedObj.origin = anml.origin;
      // generatedObj.statusLog = anml.statusLog;
      renderedAnimalsData.push(generatedObj);
      return null;
    });
    return renderedAnimalsData;
  }
  getReadableDate(isoformat) {
    const readable = new Date(isoformat);
    const m = readable.getMonth(); // returns 6
    const d = readable.getDay(); // returns 15
    const y = readable.getFullYear(); // returns 2012
    const mlong = months[m];
    const fulldate = `${mlong} ${d}, ${y}`;
    return fulldate;
  }
  boolToString(bool) {
    if (bool) {
      return 'Yes';
    } else if (!bool) {
      return 'No';
    }
    return '';
  }

  handleAnimalsFormDialog = () =>
    this.setState({ openFormDialog: !this.state.openFormDialog });
  // handlePickAnimalsFormDialog = () =>
  //   this.setState({
  //     openPickAnimalsFormDialog: !this.state.openPickAnimalsFormDialog
  //   });
  handleOrderFormDialog = () =>
    this.setState({ openOrderFormDialog: !this.state.openOrderFormDialog });

  incrementCart = () => {
    const { orderedinputFields } = this.state;
    orderedinputFields.push({});
    this.setState({
      cartCount: this.state.cartCount + 1,
      orderedinputFields
    });
  };
  animalSpeciesToOrder = selecetedAnimalSpecie => {
    const { orderedAnimals } = this.state;
    orderedAnimals.push(selecetedAnimalSpecie);
    this.setState({ orderedAnimals });
  };
  orderFormInputFieldUpdated = (e, rowIndex) => {
    const { orderedinputFields } = this.state;
    if (orderedinputFields.length === 0) {
      const orderedFieldsObj = {};
      orderedFieldsObj[e.target.name] = e.target.value;
      orderedinputFields.push(orderedFieldsObj);
    } else {
      orderedinputFields[rowIndex][e.target.name] = e.target.value;
    }
    this.setState({ orderedinputFields });
  };
  animalGenderToOrder = selectedGender => {
    const { orderedGenders } = this.state;
    orderedGenders.push(selectedGender);
    this.setState({ orderedGenders });
  };
  submitOrderAnimalForm = () => {
    const { orderedAnimals, orderedGenders, orderedinputFields } = this.state;
    const orderSubmitDetails = {};
    const animalsInCart = [];
    let cartObj = {};
    orderedAnimals.map((anmls, i) => {
      cartObj = {};
      cartObj.animalSpecie = anmls.value;
      cartObj.gender = orderedGenders[i].value;
      cartObj.quantity = orderedinputFields[i].quantity;
      cartObj.weight = orderedinputFields[i].weight;
      cartObj.color = orderedinputFields[i].color;
      animalsInCart.push(cartObj);
      return null;
    });
    orderSubmitDetails.orderedBy = this.props.loggedInUser.id;
    orderSubmitDetails.animals = animalsInCart;
    orderSubmitDetails.orderedDate = new Date();
    this.props.dispatch(submitOrder(orderSubmitDetails, this.callBack));
  };
  callBack = APIresponse => {
    this.setState({ openSnackBar: true, msg: APIresponse.message });
    if (!APIresponse.error) {
      this.handleOrderFormDialog();
    }
  };
  textFieldOnBlur = e => {
    this.setState({ [e.target.name]: e.target.value });
  };
  selectedSpecie = e => {
    this.setState({ species: e.value });
  };
  selectedGender = e => {
    this.setState({ gender: e.value });
  };
  submitAddForm = () => {
    const addFormObj = {
      uid: this.state.uid,
      genoTypeMutation: this.state.genoTypeMutation,
      origin: this.state.origin,
      regulatoryCode: this.state.regulatoryCode,
      weight: this.state.weight,
      species: this.state.species,
      gender: this.state.gender
    };
    this.props.dispatch(createAnimal(addFormObj));
  };
  render() {
    const { displayAnimalsData, animals } = this.props;
    const renderedAnimalsData = this.getRenderedAnimalsData(displayAnimalsData);
    return (
      <div>
        <Row className="margin-bottom10">
          {/* <Col lg={3} md={4} className="action-wrap">
            <ul className="action-buttons">
              <li>
                <i
                  title="Add"
                  onClick={this.handleAnimalsFormDialog}
                  className="fas fa-plus"
                />
              </li>
              <li>
                <i
                  title="Edit"
                  onClick={this.handleRowClick}
                  className="far fa-edit"
                />
              </li>
            </ul>
          </Col> */}
          <Col lg={3} md={4} className="action-wrap">
            <ul className="action-buttons">
              <li>
                <i
                  className="fa fa-shopping-cart"
                  aria-hidden="true"
                  onClick={this.handleOrderFormDialog}
                  title="Order Animals"
                />
              </li>
              {/* <li>
                <i
                  title="Pick Animals"
                  onClick={this.handlePickAnimalsFormDialog}
                  className="fa fa-check"
                />
              </li> */}
            </ul>
          </Col>
        </Row>
        <FormDialog
          open={this.state.openFormDialog}
          onClose={this.handleAnimalsFormDialog}
          formTitle="Add Animal Form"
          formContent={
            <AnimalsTableAddForm
              textFieldOnBlur={this.textFieldOnBlur}
              selectedSpecie={this.selectedSpecie}
              selectedGender={this.selectedGender}
            />
          }
          onSubmit={this.submitAddForm}
        />
        <FormDialog
          open={this.state.openOrderFormDialog}
          onClose={this.handleOrderFormDialog}
          formTitle="Order Animal"
          formContent={
            <OrderAnimalForm
              cartCount={this.state.cartCount}
              incrementCart={this.incrementCart}
              animalSpeciesToOrder={this.animalSpeciesToOrder}
              orderFormInputFieldUpdated={(e, rowIndex) =>
                this.orderFormInputFieldUpdated(e, rowIndex)
              }
              animalGenderToOrder={this.animalGenderToOrder}
            />
          }
          onSubmit={this.submitOrderAnimalForm}
        />
        {/* <FormDialog
          open={this.state.openPickAnimalsFormDialog}
          onClose={this.handlePickAnimalsFormDialog}
          formTitle="Pick Animals"
          formContent={<PickAnimalsForm />}
          onSubmit={() => alert('Development in Progress')}
        /> */}
        <DashboardTable
          rows={renderedAnimalsData}
          columns={animalsTableColumns}
          // onRowClick={this.handleRowClick}
          // onRowSelect={this.handleRowSelect}
          // pivotBy={this.state.groupBy.map(option => option.value)}
          // selection={this.state.selection}
          // selectAll={this.state.selectAll}
          coulmnSearch={coulmnSearch}
          filterable={false}
          tableData={animals}
        />
        <SnackBar
          open={this.state.openSnackBar}
          onClose={() => this.setState({ openSnackBar: false })}
          msg={this.state.msg}
        />
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    loggedInUser: state.login.loggedInUser
  };
}

export default connect(mapStateToProps)(AnimalsTable);
