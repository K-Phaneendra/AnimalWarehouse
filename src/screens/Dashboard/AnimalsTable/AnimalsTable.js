import React from 'react';
import { connect } from 'react-redux';
import { cloneDeep, keyBy, map, merge } from 'lodash';
import { Row, Col } from 'react-bootstrap';
import moment from 'moment';
import { coulmnSearch } from '../../../helpers/SearchData';
import '../Dashboard.scss';
import DashboardTable from '../DashboardTable';
import { animalsTableColumns } from '../TableColumns';
import { months } from '../../../data/reusableConstants';
import FormDialog from '../../../components/Modals/FormDialog';
import { createAnimalsData, updateAnimalData } from '../../../actions/animalSpecieActions';
import { handleSnackBar } from '../../../actions/DashboardAction';
import EditAnimalForm from './EditAnimalForm';
import { generateStatusDropDown, generateDropdownFromJson } from '../../../helpers/reusableFunctions';
import CreateAnimalsData from './CreateAnimalsData';

class AnimalsTable extends React.Component {
  constructor() {
    super();
    this.state = {
      cartData: [{}],
      openOrderFormDialog: false,
      disableSubmit: true,
      openCreateAnimalForm: false,
      openEditFormDialog: false,
      selectedRow: [],
      selectedRowForEdit: null,
      openOrderFormDialog2: false,
      arrivalDate: moment(),
      takenFromParents: moment(),
      addAnimalRecord: {},
      subSpecies: [],
      enableParentId: false,
      country: [
        { code: 101, label: 'India' },
        { code: 102, label: 'China' },
        { code: 103, label: 'Russia' }
      ],
      states: [
        { code: 201, countryCode: 101, label: 'Kerala' },
        { code: 202, countryCode: 101, label: 'Karnataka' },
        { code: 203, countryCode: 102, label: 'Shaanxi' },
        { code: 204, countryCode: 102, label: 'Fujian' },
        { code: 205, countryCode: 103, label: 'Ukraine' },
        { code: 206, countryCode: 103, label: 'Georgia' }
      ],
      city: [
        { code: 301, countryCode: 101, stateCode: 201, label: 'Kochi' },
        { code: 302, countryCode: 101, stateCode: 201, label: 'Alappuzha' },
        { code: 303, countryCode: 101, stateCode: 201, label: 'Munnar' },
        { code: 304, countryCode: 101, stateCode: 202, label: 'Bengaluru' },
        { code: 305, countryCode: 101, stateCode: 202, label: 'Mysore' },
        { code: 306, countryCode: 101, stateCode: 202, label: 'Shimoga' },
        { code: 307, countryCode: 102, stateCode: 203, label: 'Yulin' },
        { code: 308, countryCode: 102, stateCode: 203, label: 'Baoji' },
        { code: 309, countryCode: 102, stateCode: 203, label: 'Xi An' },
        { code: 310, countryCode: 102, stateCode: 204, label: 'Putian' },
        { code: 311, countryCode: 102, stateCode: 204, label: 'Ningde' },
        { code: 312, countryCode: 102, stateCode: 204, label: 'Nanping' },
        { code: 313, countryCode: 103, stateCode: 205, label: 'Kiev' },
        { code: 314, countryCode: 103, stateCode: 205, label: 'Odessa' },
        { code: 315, countryCode: 103, stateCode: 205, label: 'Lviv' },
        { code: 316, countryCode: 103, stateCode: 206, label: 'Batumi' },
        { code: 317, countryCode: 103, stateCode: 206, label: 'Gori' },
        { code: 318, countryCode: 103, stateCode: 206, label: 'Rustavi' }
      ],
      selectedState: [],
      selectedCity: []
    };
  }
  getRenderedAnimalsData = (animals) => {
    const animalsClone = cloneDeep(animals);
    const renderedAnimalsData = [];
    let generatedObj = {};
    const lookupCountry = keyBy(this.state.country, 'code');
    const lookupState = keyBy(this.state.states, 'code');
    const lookupCity = keyBy(this.state.city, 'code');
    const response = map(animalsClone, x => merge(x, { country: lookupCountry[x.country], state: lookupState[x.state], city: lookupCity[x.city] }));
    response.map(anml => {
      generatedObj = { ...anml };
      generatedObj.dob = this.getReadableDate(anml.dob);
      generatedObj.arrivalDate = this.getReadableDate(anml.arrivalDate);
      renderedAnimalsData.push(generatedObj);
      return null;
    });
    return renderedAnimalsData;
  }
  getReadableDate = (isoformat) => {
    const readable = new Date(isoformat);
    const m = readable.getMonth(); // returns 6
    const d = readable.getDay(); // returns 15
    const y = readable.getFullYear(); // returns 2012
    const mlong = months[m];
    const fulldate = `${mlong} ${d}, ${y}`;
    return fulldate;
  }
  handleOrderFormDialog = () =>
    this.setState({ openOrderFormDialog: !this.state.openOrderFormDialog });
  handleEditDialog = () => {
    if (this.state.selectedRow.length === 0) {
      alert('Please select a row');
    } else if (this.state.selectedRow.length === 1) {
      this.setState({ openEditFormDialog: !this.state.openEditFormDialog });
    } else if (this.state.selectedRow.length > 1) {
      alert('Please select a single row to perform edit');
    }
  }
  selectStatus = (e) => {
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.status = e.value;
    selectedRowForEdit.statusObj = e;
    this.setState({ selectedRowForEdit });
  };
  callBack = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.handleEditDialog();
    }
  };
  textFieldOnBlur = e => {
    this.setState({ [e.target.name]: e.target.value });
  };
  /* Edit starts */
  selectedRows = (data) => {
    this.setState({ selectedRow: data });
    const key = '_id';
    let obj = {};
    if (data.length === 1) {
      const cloneAnimalsData = cloneDeep(this.props.displayAnimalsData);
      const lookupCountry = keyBy(this.state.country, 'code');
      const lookupState = keyBy(this.state.states, 'code');
      const lookupCity = keyBy(this.state.city, 'code');
      const response = map(cloneAnimalsData, x => merge(x, { country: lookupCountry[x.country], state: lookupState[x.state], city: lookupCity[x.city] }));
      response.map(vals => {
        if (vals[key] === data[0]) {
          // console.log(vals);
          const selected = [];
          let stateObj = {};
          this.state.states.map(statesVals => {
            stateObj = {};
            if (vals.country.code === statesVals.countryCode) {
              stateObj.code = statesVals.code;
              stateObj.label = statesVals.label;
              stateObj.value = statesVals.code;
              selected.push(stateObj);
            }
            return null;
          });
          this.setState({ selectedState: selected });
          const selectedCities = [];
          let cityObj = {};
          this.state.city.map(cityVals => {
            cityObj = {};
            if (vals.state.code === cityVals.stateCode) {
              cityObj.code = cityVals.code;
              cityObj.label = cityVals.label;
              cityObj.value = cityVals.code;
              selectedCities.push(cityObj);
            }
            return null;
          });
          this.setState({ selectedCity: selectedCities });
          let companyId = 0;
          if (vals.companyId) {
            companyId = vals.companyId;
          }
          let governmentId = 0;
          if (vals.governmentId) {
            governmentId = vals.governmentId;
          }
          let projectId = 0;
          if (vals.projectId) {
            projectId = vals.projectId;
          }
          let studyId = 0;
          if (vals.studyId) {
            studyId = vals.studyId;
          }
          let species = '';
          if (vals.species) {
            species = vals.species.name;
          } else {
            species = '';
          }
          let speciesId = '';
          if (vals.species) {
            speciesId = vals.species[key];
          } else {
            speciesId = '';
          }
          let subSpecies = '';
          if (vals.subSpezies) {
            subSpecies = vals.subSpezies.name;
          } else {
            subSpecies = '';
          }
          let subSpeziesId = '';
          if (vals.subSpezies) {
            subSpeziesId = vals.subSpezies[key];
          } else {
            subSpeziesId = '';
          }
          let gender = '';
          if (vals.gender) {
            gender = vals.gender;
          } else {
            gender = '';
          }
          let weight = 0;
          if (vals.weight) {
            weight = vals.weight;
          }
          let color = '';
          if (vals.color) {
            color = vals.color;
          } else {
            color = '';
          }
          let genoTypeMutation = '';
          if (vals.genoTypeMutation) {
            genoTypeMutation = vals.genoTypeMutation;
          } else {
            genoTypeMutation = '';
          }
          let regulatoryCode = '';
          if (vals.regulatoryCode) {
            regulatoryCode = vals.regulatoryCode;
          } else {
            regulatoryCode = '';
          }
          let fatherId = 0;
          let motherId = 0;
          let taken = '';
          if (vals.takenFromParent) {
            this.setState({ enableParentId: true });
            taken = 'Yes';
            fatherId = vals.fatherId;
            motherId = vals.motherId;
          } else {
            this.setState({ enableParentId: false });
            taken = 'No';
            fatherId = 0;
            motherId = 0;
          }
          let dob = '';
          if (vals.dob) {
            dob = moment(vals.dob).format('DD-MMM-YYYY');
          } else {
            dob = '';
          }
          let arrivalDate = '';
          if (vals.arrivalDate) {
            arrivalDate = moment(vals.arrivalDate).format('DD-MMM-YYYY');
          } else {
            arrivalDate = '';
          }
          let warehouse = '';
          if (vals.warehouse) {
            warehouse = vals.warehouse;
          } else {
            warehouse = '';
          }
          let building = '';
          if (vals.building) {
            building = vals.building;
          } else {
            building = '';
          }
          let floor = '';
          if (vals.floor) {
            floor = vals.floor;
          } else {
            floor = '';
          }
          let roomNumber = '';
          if (vals.roomNumber) {
            roomNumber = vals.roomNumber;
          } else {
            roomNumber = '';
          }
          let boxNumber = '';
          if (vals.boxNumber) {
            boxNumber = vals.boxNumber;
          } else {
            boxNumber = '';
          }
          let status = '';
          if (vals.status) {
            status = { value: vals.status[key], label: vals.status.name };
          } else {
            status = '';
          }
          let supplier = '';
          if (vals.supplier) {
            supplier = { value: vals.supplier[key], label: vals.supplier.name };
          } else {
            supplier = '';
          }
          obj = {
            rowId: vals[key],
            companyId,
            governmentId,
            projectId,
            studyId,
            species,
            speciesId,
            subSpecies,
            subSpeziesId,
            weight,
            color,
            genoTypeMutation,
            regulatoryCode,
            displayGender: { value: vals.gender, label: vals.gender },
            gender,
            displayTakenFromParent: taken,
            takenFromParent: vals.takenFromParent,
            dob,
            arrivalDate,
            fatherId,
            motherId,
            country: { value: vals.country.code, code: vals.country.code, label: vals.country.label },
            state: { value: vals.state.code, label: vals.state.label, code: vals.state.code },
            city: { value: vals.city.code, label: vals.city.label, code: vals.city.code },
            warehouse,
            building,
            floor,
            roomNumber,
            boxNumber,
            status,
            supplier
          };
        }
        return null;
      });
      this.setState({ selectedRowForEdit: obj });
    }
  }
  editTextOnBlur = (e) => {
    const { selectedRowForEdit } = this.state;
    if (e.target.type === 'text') {
      // eslint-disable-next-line
      selectedRowForEdit[e.target.name] = e.target.value;
    } else {
      // eslint-disable-next-line
      selectedRowForEdit[e.target.name] = e.target.value;
    }
    this.setState({ selectedRowForEdit, disableSubmit: false });
  };
  selectGenderOnEdit = (e) => {
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.gender = e.value;
    selectedRowForEdit.displayGender = e;
    this.setState({ selectedRowForEdit });
  };
  selectStatusForEdit = (e) => {
    const { selectedRowForEdit } = this.state;
    const key = '_id';
    selectedRowForEdit.status = e[key];
    this.setState({ selectedRowForEdit });
  }
  handleCountryEdit = (e) => {
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.country = e;
    selectedRowForEdit.state = {};
    const selected = [];
    let obj = {};
    this.state.states.map(vals => {
      obj = {};
      if (vals.countryCode === e.code) {
        obj.code = vals.code;
        obj.label = vals.label;
        obj.value = vals.code;
        selected.push(obj);
      }
      return null;
    });
    this.setState({ selectedState: selected, selectedRowForEdit });
  }
  handleStateOnEdit = e => {
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.state = e;
    selectedRowForEdit.city = {};
    const selected = [];
    let obj = {};
    this.state.city.map(vals => {
      obj = {};
      if (e.code === vals.stateCode) {
        obj.code = vals.code;
        obj.label = vals.label;
        obj.value = vals.code;
        selected.push(obj);
      }
      return null;
    });
    this.setState({ selectedCity: selected, selectedRowForEdit });
  }
  handleCityOnEdit = e => {
    const { selectedRowForEdit } = this.state;
    selectedRowForEdit.city = e;
    this.setState({ selectedRowForEdit });
  }
  submitEditAnimalForm = () => {
    const { selectedRowForEdit } = this.state;
    // console.log(selectedRowForEdit);
    const id = selectedRowForEdit.rowId;
    // const key = '_id';
    const obj = {
      companyId: Number(selectedRowForEdit.companyId),
      governmentId: Number(selectedRowForEdit.governmentId),
      projectId: Number(selectedRowForEdit.projectId),
      studyId: Number(selectedRowForEdit.studyId),
      species: selectedRowForEdit.speciesId,
      subSpecies: selectedRowForEdit.subSpeziesId,
      gender: selectedRowForEdit.gender,
      genoTypeMutation: selectedRowForEdit.genoTypeMutation,
      regulatoryCode: selectedRowForEdit.regulatoryCode,
      color: selectedRowForEdit.color,
      weight: Number(selectedRowForEdit.weight),
      supplier: selectedRowForEdit.supplier.value,
      takenFromParent: selectedRowForEdit.takenFromParent,
      fatherId: selectedRowForEdit.fatherId,
      motherId: selectedRowForEdit.motherId,
      arrivalDate: moment(selectedRowForEdit.arrivalDate).format(),
      dob: moment(selectedRowForEdit.dob).format(),
      country: selectedRowForEdit.country.code,
      state: selectedRowForEdit.state.code,
      city: selectedRowForEdit.city.code,
      warehouse: selectedRowForEdit.warehouse,
      building: selectedRowForEdit.building,
      floor: Number(selectedRowForEdit.floor),
      roomNumber: Number(selectedRowForEdit.roomNumber),
      boxNumber: Number(selectedRowForEdit.boxNumber),
      status: selectedRowForEdit.status
    };
    // console.log(obj);
    this.props.dispatch(updateAnimalData(obj, id, this.callBack));
  }
  /* Edit ends */
  /* add animals start */
  textOnBlur = (e) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord[e.target.name] = e.target.value;
    this.setState({ addAnimalRecord });
  };
  selectSpecies = (e) => {
    const { addAnimalRecord } = this.state;
    const key = '_id';
    const subSpecies = [];
    let obj = {};
    this.props.subSpecies.map(vals => {
      obj = {};
      if (e.value === vals.species) {
        obj.label = vals.name;
        obj[key] = vals[key];
        obj.value = vals[key];
        subSpecies.push(obj);
      }
      return null;
    });
    addAnimalRecord.species = e[key];
    this.setState({ addAnimalRecord, subSpecies });
  };
  selectSubSpecies = (e) => {
    const { addAnimalRecord } = this.state;
    const key = '_id';
    addAnimalRecord.subSpecies = e[key];
    this.setState({ addAnimalRecord });
  };
  selectGender = (e) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.gender = e.value;
    this.setState({ addAnimalRecord });
  };
  selectStatusForOrder = (e) => {
    const { addAnimalRecord } = this.state;
    const key = '_id';
    addAnimalRecord.status = e[key];
    this.setState({ addAnimalRecord });
  }
  handleTakenFromParent = (e) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.takenFromParent = e.value;
    if (e.value === true) {
      this.setState({ enableParentId: true });
    } else if (e.value === false) {
      this.setState({ enableParentId: false });
    }
    this.setState({ addAnimalRecord });
  }
  handleArrivalDate = (date) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.arrivalDate = moment(date).format('DD-MMM-YYYY');
    this.setState({ arrivalDate: moment(date), addAnimalRecord });
  }
  handleBirthDate = (date) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.dob = moment(date).format('DD-MMM-YYYY');
    this.setState({ arrivalDate: moment(date), addAnimalRecord });
  }
  handleCountry = (e) => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.country = e.code;
    const selected = [];
    let obj = {};
    this.state.states.map(vals => {
      obj = {};
      if (vals.countryCode === e.code) {
        obj.code = vals.code;
        obj.label = vals.label;
        obj.value = vals.code;
        selected.push(obj);
      }
      return null;
    });
    this.setState({ selectedState: selected, addAnimalRecord });
  }
  handleState = e => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.state = e.code;
    const selected = [];
    let obj = {};
    this.state.city.map(vals => {
      obj = {};
      if (e.code === vals.stateCode) {
        obj.code = vals.code;
        obj.label = vals.label;
        obj.value = vals.code;
        selected.push(obj);
      }
      return null;
    });
    this.setState({ selectedCity: selected, addAnimalRecord });
  }
  handleCity = e => {
    const { addAnimalRecord } = this.state;
    addAnimalRecord.city = e.code;
    this.setState({ addAnimalRecord });
  }
  handleSupplier = e => {
    const { addAnimalRecord } = this.state;
    const key = '_id';
    addAnimalRecord.supplier = e[key];
    this.setState({ addAnimalRecord });
  }
  submitCreateAnimalForm = () => {
    const { addAnimalRecord } = this.state;
    let fatherId = 0;
    if (addAnimalRecord.fatherId) {
      fatherId = Number(addAnimalRecord.fatherId);
    } else {
      fatherId = 0;
    }
    let motherId = 0;
    if (addAnimalRecord.motherId) {
      motherId = Number(addAnimalRecord.motherId);
    } else {
      motherId = 0;
    }
    const cartObj = {
      companyId: Number(addAnimalRecord.companyId),
      governmentId: Number(addAnimalRecord.governmentId),
      projectId: Number(addAnimalRecord.projectId),
      studyId: Number(addAnimalRecord.studyId),
      species: addAnimalRecord.species,
      subSpezies: addAnimalRecord.subSpecies,
      color: addAnimalRecord.color,
      weight: Number(addAnimalRecord.weight),
      genoTypeMutation: addAnimalRecord.genoTypeMutation,
      regulatoryCode: addAnimalRecord.regulatoryCode,
      gender: addAnimalRecord.gender,
      status: addAnimalRecord.status,
      takenFromParent: addAnimalRecord.takenFromParent,
      fatherId,
      motherId,
      dob: addAnimalRecord.dob,
      arrivalDate: addAnimalRecord.arrivalDate,
      supplier: addAnimalRecord.supplier,
      country: addAnimalRecord.country,
      state: addAnimalRecord.state,
      city: addAnimalRecord.state,
      warehouse: addAnimalRecord.warehouse,
      building: addAnimalRecord.building,
      floor: Number(addAnimalRecord.floor),
      roomNumber: Number(addAnimalRecord.roomNumber),
      boxNumber: Number(addAnimalRecord.boxNumber)
    };
    this.props.dispatch(createAnimalsData(cartObj, this.callBack2));
  };
  callBack2 = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.handleOrderFormDialog2();
    }
  };
  handleOrderFormDialog2 = () =>
  this.setState({ openOrderFormDialog2: !this.state.openOrderFormDialog2 });
  /* add animals end */
  render() {
    const {
      addAnimalRecord,
      selectedRowForEdit,
      arrivalDate,
      subSpecies,
      enableParentId,
      country,
      selectedState,
      selectedCity
    } = this.state;
    const {
      displayAnimalsData,
      // animals,
      animalSpecies,
      animalStatuses,
      suppliers
     } = this.props;
    const renderedAnimalsData = this.getRenderedAnimalsData(displayAnimalsData);
    const statusDropDown = generateStatusDropDown(animalStatuses);
    const suppliersDropdown = generateDropdownFromJson(suppliers);
    let { disableSubmit } = this.state;
    if (
      addAnimalRecord.gender
    ) {
      disableSubmit = false;
    }
    const selRow = [];
    if (selectedRowForEdit) {
      selRow.push(selectedRowForEdit);
    }
    // console.log(selectedRowForEdit, 'selectedRowForEdit');
    // console.log(addAnimalRecord, 'addAnimalRecord');
    return (
      <div>
        {/* icons */}
        <Row className="margin-bottom10">
          <Col lg={3} md={4} className="action-wrap">
            <ul className="action-buttons">
              <li>
                <i
                  className="fas fa-plus"
                  aria-hidden="true"
                  onClick={this.handleOrderFormDialog2}
                  title="Add Animals"
                />
              </li>
              {selRow.length === 1 ? (
                <li>
                  <i
                    className="far fa-edit"
                    aria-hidden="true"
                    onClick={this.handleEditDialog}
                    title="Edit Animals"
                  />
                </li>
               ) : (
                ''
              )}
            </ul>
          </Col>
        </Row>
        {/* Add animals table */}
        <FormDialog
          open={this.state.openOrderFormDialog2}
          onClose={this.handleOrderFormDialog2}
          formTitle="Add Animal To Warehouse"
          formContent={
            <CreateAnimalsData
              textOnBlur={this.textOnBlur}
              animalSpecies={animalSpecies}
              selectSpecies={this.selectSpecies}
              subSpeciesOptions={subSpecies}
              selectSubSpecies={this.selectSubSpecies}
              selectGender={this.selectGender}
              statusDropDown={statusDropDown}
              selectStatusForOrder={this.selectStatusForOrder}
              handleTakenFromParent={this.handleTakenFromParent}
              enableParentId={enableParentId}
              arrivalDate={arrivalDate}
              handleArrivalDate={this.handleArrivalDate}
              handleBirthDate={this.handleBirthDate}
              country={country}
              handleCountry={this.handleCountry}
              selectedState={selectedState}
              handleState={this.handleState}
              selectedCity={selectedCity}
              handleCity={this.handleCity}
              suppliersDropdown={suppliersDropdown}
              handleSupplier={this.handleSupplier}
              // roomNumber={roomNumber}
              // boxNumber={boxNumber}
              // handleRoomNumber={this.handleRoomNumber}
              // handleBoxNumber={this.handleBoxNumber}
              // handleTakenDate={this.handleTakenDate}
              // toggleCreateAnimalForm={() =>
              //   this.setState({
              //     openCreateAnimalForm: !this.state.openCreateAnimalForm
              //   })
              // }
              // openCreateAnimalForm={this.state.openCreateAnimalForm}
              // takenFromParents={takenFromParents}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.submitCreateAnimalForm}
        />
        {/* Edit data table */}
        <FormDialog
          open={this.state.openEditFormDialog}
          onClose={this.handleEditDialog}
          formTitle="Edit Animal Warehouse Data"
          formContent={
            <EditAnimalForm
              data={selectedRowForEdit}
              editTextOnBlur={this.editTextOnBlur}
              selectGenderOnEdit={this.selectGenderOnEdit}
              enableParentId={enableParentId}
              statusData={statusDropDown}
              selectStatus={this.selectStatus}
              selectStatusForEdit={this.selectStatusForEdit}
              country={country}
              handleCountryEdit={this.handleCountryEdit}
              selectedState={selectedState}
              handleStateOnEdit={this.handleStateOnEdit}
              selectedCity={selectedCity}
              handleCityOnEdit={this.handleCityOnEdit}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.submitEditAnimalForm}
        />
        {/* Dashboard view table */}
        <DashboardTable
          rows={renderedAnimalsData}
          columns={animalsTableColumns}
          // isSelected={this.isSelected}
          // onRowClick={this.handleRowClick}
          // onRowSelect={this.handleRowSelect}
          // toggleSelection={this.handleRowClick}
          // pivotBy={this.state.groupBy.map(option => option.value)}
          // selection={this.state.selection}
          // selectAll={this.state.selectAll}
          coulmnSearch={coulmnSearch}
          filterable={false}
          // tableData={gridData}
          selectedRows={this.selectedRows}
        />
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    loggedInUser: state.login.loggedInUser,
    animalSpecies: state.animalsReducer.animalSpecies,
    animalStatuses: state.animalsReducer.animalStatuses,
    subSpecies: state.animalsReducer.subSpecies,
    suppliers: state.animalsReducer.suppliers
    // rooms: state.animalsReducer.rooms,
    // boxes: state.animalsReducer.boxes
  };
}

export default connect(mapStateToProps)(AnimalsTable);
