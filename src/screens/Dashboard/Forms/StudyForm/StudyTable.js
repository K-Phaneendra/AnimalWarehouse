import React, { Component } from 'react';
import { connect } from 'react-redux';
import { cloneDeep } from 'lodash';
import { studyTableColumns, studyTableSubColumns } from '../../TableColumns';
import GroupingTable from '../../../../components/Table/GroupingTable';
import FormDialog from '../../../../components/Modals/FormDialog';
import SubmitStudyResult from './SubmitStudyResult';
import { submitStudyResultToDB } from '../../../../actions/animalSpecieActions';

class StudyTable extends Component {
  constructor() {
    super();
    this.state = {
      dataToEdit: {},
      loopIndex: '',
      openStudyEdit: false,
      disableSubmit: true
    };
  }

  getEditStudyModal = (dataToEdit, loopIndex, openStudyEdit, disableSubmit) => {
    if (dataToEdit.animals) {
      return (
        <FormDialog
          open={openStudyEdit}
          onClose={this.handleCloseStudyEdit}
          formTitle="Edit Study / Experiment"
          formContent={
            <SubmitStudyResult
              dataToEdit={dataToEdit}
              loopIndex={loopIndex}
              updatedData={this.updatedData}
            />
          }
          onSubmit={() => this.submitResult(dataToEdit)}
          disableSubmit={disableSubmit}
        />
      );
    }
    return '';
  };
  getStudyResult = dataToEdit => {
    let studyResult = '';
    let totalAnimalsQty = 0;
    let totalAliveQty = 0;
    dataToEdit.animals.map(anmls => {
      totalAnimalsQty += Number(anmls.quantity);
      totalAliveQty += Number(anmls.aliveQuantity);
      return null;
    });
    const fiftyPercentOfTotalAnimalsQty = totalAnimalsQty * 0.5;
    const leftOverAnimals = totalAnimalsQty - totalAliveQty;
    if (leftOverAnimals < fiftyPercentOfTotalAnimalsQty) {
      studyResult = 'FAIL';
    } else {
      studyResult = 'PASS';
    }
    return { studyResult, totalAnimalsQty, totalAliveQty };
  };
  submitResult = dataToEdit => {
    const { studyResult, totalAnimalsQty, totalAliveQty } = this.getStudyResult(
      dataToEdit
    );
    console.log('on submit', dataToEdit, studyResult);
    const objectId = '_id';
    let animalGroupObj = {};
    let studiesObj = {};
    dataToEdit.animals.map((anmls, i) => {
      animalGroupObj = { ...dataToEdit };
      animalGroupObj.studyId = dataToEdit.studyId[objectId];
      animalGroupObj.animals[i].animalSpecie = anmls.animalSpecie[objectId];
      // animalGroupObj.animals[i].aliveQuantity = Number(anmls.aliveQuantity);
      studiesObj = {};
      studiesObj[objectId] = dataToEdit.studyId[objectId];
      studiesObj.name = dataToEdit.name;
      studiesObj.result = studyResult;
      return null;
    });
    console.log('obj to db', animalGroupObj, studiesObj);
    this.props.dispatch(
      submitStudyResultToDB(
        { animalGroupObj, studiesObj, totalAnimalsQty, totalAliveQty },
        this.callBack
      )
    );
  };
  callBack = APIresponse => {
    this.setState({ openSnackBar: true, msg: APIresponse.message });
    if (!APIresponse.error) {
      this.handleCloseStudyEdit();
    }
  };
  handleCloseStudyEdit = () => {
    this.setState({ dataToEdit: {}, loopIndex: '', openStudyEdit: false });
  };
  handleStudyEdit = (anmlGrp, index) => {
    console.log('on edit', anmlGrp, index);
    this.setState({
      dataToEdit: anmlGrp,
      loopIndex: index,
      openStudyEdit: true
    });
  };

  updatedData = dataFromGrid => {
    const { dataToEdit } = this.state;
    dataFromGrid.map(gridData => {
      if (gridData.quantity < gridData.aliveQuantity) {
        // eslint-disable-next-line
        gridData.remarks = 'Invalid Quantity';
      } else {
        // eslint-disable-next-line
        gridData.remarks = '';
      }
      return null;
    });
    this.setState({ [dataToEdit.animals]: dataFromGrid });
  };
  checkDisableSubmit = dataToEdit => {
    let disable = true;
    const remarksArr = [];
    dataToEdit.animals.map(editable => {
      remarksArr.push(editable.remarks);
      return null;
    });
    dataToEdit.animals.map(editable => {
      if (remarksArr.indexOf('Invalid Quantity') >= 0) {
        disable = true;
      } else {
        disable = false;
      }
      if (!editable.aliveQuantity) {
        disable = true;
      }
      return null;
    });
    return disable;
  };
  renderAnimalGroupTable = animalGroups => {
    const animalGroupsClone = cloneDeep(animalGroups);
    const animalGroupTableData = [];
    let animalGroupObj = {};
    animalGroupsClone.map((anmlGrp, index) => {
      animalGroupObj = { ...anmlGrp };
      animalGroupObj.editAction = (
        <i
          className="far fa-edit"
          title="Edit"
          onClick={() => this.handleStudyEdit(anmlGrp, index)}
        />
      );
      animalGroupTableData.push(animalGroupObj);
      return null;
    });
    console.log('animalGroupTableData', animalGroupTableData);
    return animalGroupTableData;
  };

  render() {
    const { animalGroups } = this.props;
    const { dataToEdit, loopIndex, openStudyEdit } = this.state;
    const animalGroupTableData = this.renderAnimalGroupTable(animalGroups);
    console.log('animalGroups', animalGroups, animalGroupTableData);
    let { disableSubmit } = this.state;
    if (dataToEdit.animals) {
      disableSubmit = this.checkDisableSubmit(dataToEdit);
    }

    return (
      <div>
        <GroupingTable
          columns={studyTableColumns}
          rows={animalGroupTableData}
          // pivotBy={['studyId.name']}
          subComponentColumns={studyTableSubColumns}
        />
        {this.getEditStudyModal(
          dataToEdit,
          loopIndex,
          openStudyEdit,
          disableSubmit
        )}
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    animalGroups: state.animalsReducer.animalGroups
  };
}

export default connect(mapStateToProps)(StudyTable);
