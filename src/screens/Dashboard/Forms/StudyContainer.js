import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
import StudyForm from './StudyForm/StudyForm';
import StudyTable from './StudyForm/StudyTable';
import FormDialog from '../../../components/Modals/FormDialog';
import { createStudy } from '../../../actions/animalSpecieActions';
import { availableAnimalsDropDown } from '../../../helpers/reusableFunctions';
import { handleSnackBar } from '../../../actions/DashboardAction';

class StudyContainer extends Component {
  constructor() {
    super();
    this.state = {
      openFormDialog: false,
      studyName: '',
      studyNumber: '',
      disabled: true,
      cartData: [{}]
    };
  }
  handleAddStudyFormDialog = () =>
    this.setState({ openFormDialog: !this.state.openFormDialog });

  captureStudyName = e => this.setState({ studyName: e.target.value });
  captureStudyNumber = e => this.setState({ studyNumber: e.target.value });
  incrementedCartData = cartData => {
    cartData.push({});
    return cartData;
  };
  incrementCart = () => {
    const { cartData } = this.state;
    const incrementedCartData = this.incrementedCartData(cartData);
    this.setState({ cartData: incrementedCartData });
  };
  selectSpecie = (e, count) => {
    const { cartData } = this.state;
    cartData.map((values, index) => {
      if (index === count) {
        // eslint-disable-next-line
        values.specie = e.value;
        // eslint-disable-next-line
        values.selectedSpecie = e;
      }
      return null;
    });
    this.setState({ cartData });
  };
  textOnBlur = (e, count) => {
    const { cartData } = this.state;
    cartData.map((values, index) => {
      if (index === count) {
        if (e.target.name === 'quantity') {
          // check with available quanitity
          if (values.selectedSpecie.available < Number(e.target.value)) {
            // eslint-disable-next-line
            values.quantityError = true;
          } else {
            // eslint-disable-next-line
            values[e.target.name] = e.target.value;
            // eslint-disable-next-line
            values.quantityError = false;
          }
          if (values.gender === 'male') {
            if (values.selectedSpecie.male < Number(e.target.value)) {
              // eslint-disable-next-line
              values.genderError = true;
            } else {
              // eslint-disable-next-line
              values.genderError = false;
            }
          }
          if (values.gender === 'female') {
            if (values.selectedSpecie.female < Number(e.target.value)) {
              // eslint-disable-next-line
              values.genderError = true;
            } else {
              // eslint-disable-next-line
              values.genderError = false;
            }
          }
        } else {
          // eslint-disable-next-line
          values[e.target.name] = e.target.value;
        }
      }
      return null;
    });
    this.setState({ cartData });
  };
  selectGender = (e, count) => {
    const { cartData } = this.state;
    cartData.map((values, index) => {
      if (index === count) {
        if (e.value === 'male') {
          if (values.selectedSpecie.male < Number(values.quantity)) {
            // eslint-disable-next-line
            values.genderError = true;
          } else {
            // eslint-disable-next-line
            values.gender = e.value;
            // eslint-disable-next-line
            values.genderError = false;
          }
        } else if (e.value === 'female') {
          if (values.selectedSpecie.female < Number(values.quantity)) {
            // eslint-disable-next-line
            values.genderError = true;
          } else {
            // eslint-disable-next-line
            values.gender = e.value;
            // eslint-disable-next-line
            values.genderError = false;
          }
        }
        // eslint-disable-next-line
        values.selectedGender = e;
      }
      return null;
    });
    this.setState({ cartData });
  };
  decrementCart = count => {
    const { cartData } = this.state;
    const decrementedCart = [];
    cartData.map((values, index) => {
      if (count === index) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    this.setState({ cartData: decrementedCart });
  };
  createStudyOnSubmit = () => {
    const { studyName, studyNumber, cartData } = this.state;
    const animalsInGroup = [];
    let cartObj = {};
    cartData.map(cartValues => {
      cartObj = {};
      cartObj.animalSpecie = cartValues.specie;
      cartObj.gender = cartValues.gender;
      cartObj.quantity = cartValues.quantity;
      cartObj.weight = cartValues.weight;
      cartObj.color = cartValues.color;
      animalsInGroup.push(cartObj);
      return null;
    });
    const studyDetails = {};
    studyDetails.studyName = studyName;
    studyDetails.studyNumber = studyNumber;
    studyDetails.animalsInGroup = animalsInGroup;
    studyDetails.createdBy = this.props.loggedInUser.id;
    studyDetails.createdDate = new Date();
    this.props.dispatch(createStudy(studyDetails, this.callBack));
  };
  callBack = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse })
    );
    this.handleAddStudyFormDialog();
  };

  checkDisabled = (studyName, studyNumber, cartData) => {
    let disabled = true;
    cartData.map(values => {
      disabled = true;
      if (values.genderError === false && values.quantityError === false) {
        disabled = false;
      }
      return null;
    });
    if (
      studyName !== '' &&
      studyNumber !== '' &&
      cartData[0].specie &&
      cartData[0].quantity &&
      cartData[0].weight &&
      cartData[0].color &&
      cartData[0].gender
    ) {
      disabled = false;
    } else {
      disabled = true;
    }
    return disabled;
  };
  render() {
    const { animalSpecies, animalsStats } = this.props;
    const { studyName, studyNumber, cartData } = this.state;
    // console.log('cartData', cartData);
    let { disabled } = this.state;

    disabled = this.checkDisabled(studyName, studyNumber, cartData);
    const availableAnimalOptions = availableAnimalsDropDown(
      animalSpecies,
      animalsStats
    );
    return (
      <div>
        <div>
          <Row className="margin-bottom10">
            <Col lg={3} md={4} className="action-wrap">
              <ul className="action-buttons">
                <li>
                  <i
                    title="Add Study"
                    onClick={this.handleAddStudyFormDialog}
                    className="fas fa-plus"
                  />
                </li>
              </ul>
            </Col>
          </Row>
        </div>
        <div>
          <FormDialog
            open={this.state.openFormDialog}
            onClose={this.handleAddStudyFormDialog}
            formTitle={'Create Study/Experiment'}
            formContent={
              <StudyForm
                cartData={cartData}
                animalSpecies={animalSpecies}
                studyName={studyName}
                captureStudyName={this.captureStudyName}
                captureStudyNumber={this.captureStudyNumber}
                incrementCart={this.incrementCart}
                selectSpecie={this.selectSpecie}
                textOnBlur={this.textOnBlur}
                selectGender={this.selectGender}
                decrementCart={this.decrementCart}
                animalsStats={animalsStats}
                availableAnimalOptions={availableAnimalOptions}
              />
            }
            onSubmit={() => this.createStudyOnSubmit()}
            disableSubmit={disabled}
          />
        </div>
        <div>
          <StudyTable />
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    loggedInUser: state.login.loggedInUser
  };
}

export default connect(mapStateToProps)(StudyContainer);
