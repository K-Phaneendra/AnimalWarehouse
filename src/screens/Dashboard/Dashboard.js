import React from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
// import { Link } from 'react-router';
// import Select from '../../components/Dropdown/Select';
// import {
//   fetchProcessDataByStatus,
//   fetchAllBusinessProcesses
// } from '../../actions/ProcessActions';
import './Dashboard.scss';
// import DashboardSearchBar from './dashboardSearchbar';
// import DashboardFilter from './dashboardFilter';
import DashboardToggleView from './dashboardToggleView';
// import FilterContent from './filterContent';
import ViewContentTile from './viewContentTile';
// import ViewContentGrid from './viewContentGrid';
import { NoResultFound } from './NoResultFound';
import { fetchAnimals, fetchLabAnimals } from '../../actions/animalActions';
import FullWidthTabs from '../../components/Tabs/tabs';
import { SnackBar } from '../../components/SnackBar';
import { handleSnackBar } from '../../actions/DashboardAction';

class PositionSearch extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      togglefilter: false,
      // togglecandidate: false
      // filteredData: [],
      // noSearchFound: false
      // selection: [],
      // selectAll: false,
      // groupBy: [],
      activePage: 1
    };
    this.toggleFilter = this.toggleFilter.bind(this);
    // this.toggleCandidate = this.toggleCandidate.bind(this);
    // this.searchResult = this.searchResult.bind(this);
  }

  componentDidMount() {
    this.props.dispatch(fetchAnimals());
    this.props.dispatch(fetchLabAnimals());
  }
  onSlideChange = number => this.setState({ activePage: number });
  toggleFilter = () =>
    this.setState({ togglefilter: !this.state.togglefilter });
  // toggleCandidate = () =>
  //   this.setState(prevState => ({
  //     togglecandidate: !prevState.togglecandidate
  //   }));

  // searchResult(data, obj) {
  //   if (obj.noSearchFound === true) {
  //     this.setState({ noSearchFound: true });
  //   }
  //   if (obj.noSearchFound === false) {
  //     this.setState({ noSearchFound: false });
  //   }
  //   this.setState({ filteredData: data });
  // }
  handleTableDropdownChange = name => value => this.setState({ [name]: value });

  render() {
    // let props = { ...this.props };
    // let state = { ...this.state };
    const {
      animals,
      animalsStats,
      labAnimals,
      searchResult,
      currentView
    } = this.props;
    let { animalSpecies } = this.props;
    let displayAnimalsData = animals;
    let displayLabAnimalsData = labAnimals;
    // let activePage = state.activePage;
    if (searchResult.data) {
      if (searchResult.data.length === 0) {
        // props = { ...this.props };
        // state = { ...this.state };
        displayAnimalsData = animals;
        displayLabAnimalsData = labAnimals;
        animalSpecies = this.props.animalSpecies;
        // activePage = state.activePage;
      }
      if (searchResult.data.length > 0) {
        // displayData = props.searchResult.data;
        // activePage = 1;
        animalSpecies = searchResult.data;
      }
    }
    let noSearchFound = false;
    if (searchResult.obj) {
      if (searchResult.obj.noSearchFound) {
        noSearchFound = searchResult.obj.noSearchFound;
      }
    }
    let openDiv = false;
    if (currentView === 'tileView') {
      openDiv = true;
    }
    // const listView = props.currentView === 'listView';
    const tileView = currentView === 'tileView';
    const tableView = currentView === 'tableView';

    // const groupByOptions = [
    //   {
    //     label: 'Process',
    //     value: 'processName'
    //   },
    //   {
    //     label: 'Sub Process',
    //     value: 'subProcess'
    //   },
    //   { label: 'Region', value: 'region' },
    //   {
    //     label: 'Country',
    //     value: 'country'
    //   }
    // ];
    return (
      <div className="position-search-wrap">
        <div className="browse-wrap">
          <DashboardToggleView />
          <div className="grid-view">
            {/* <div className="browse-header">
              <Row>
                <Col lg={6} md={6} sm={12}>
                  <DashboardSearchBar
                    processData={props.processData}
                    searchResult={this.searchResult}
                  />
                </Col>
                <Col lg={3} md={3} sm={12}>
                  <DashboardFilter toggleFilter={this.toggleFilter} />
                </Col>
                <Col lg={6} md={6} sm={12} className="text-right">
                  <DashboardToggleView toggleView={this.toggleCandidate} />
                </Col>
                <Col
                  lg={12}
                  md={12}
                  sm={12}
                  className={`filter-wrap no-padding border-top ${
                    this.state.togglefilter ? 'active' : ''
                  }`}
                >
                  <FilterContent />
                </Col>
              </Row>
            </div> */}
            {noSearchFound === false ? (
              <div>
                <Row>
                  <Col
                    lg={12}
                    md={12}
                    sm={12}
                    className={`candidate-list-wrap margin-top ${
                      openDiv ? 'active' : ''
                    }`}
                  >
                    {tileView && (
                      <ViewContentTile
                        animalsData={displayAnimalsData}
                        labAnimalsData={displayLabAnimalsData}
                        animalSpecies={animalSpecies}
                        animalsStats={animalsStats}
                        // activePage={activePage}
                        handlePaginationChange={this.onSlideChange}
                        // processes={props.processes}
                      />
                    )}
                  </Col>
                </Row>
                {/* {listView && (
                  <ViewContentGrid
                    togglecandidate={false}
                    processData={displayData}
                    activePage={activePage}
                    handlePaginationChange={this.onSlideChange}
                    processes={props.processes}
                  />
                )} */}
                {tableView && (
                  <div>
                    <FullWidthTabs
                      displayAnimalsData={displayAnimalsData}
                      animals={animals}
                      displayLabAnimalsData={displayLabAnimalsData}
                      labAnimals={labAnimals}
                      animalSpecies={animalSpecies}
                      animalsStats={animalsStats}
                    />
                  </div>
                )}
                {/* <ViewContentGrid
                  togglecandidate={props.toggleGridView}
                  processData={displayData}
                /> */}
              </div>
            ) : (
              <NoResultFound />
            )}
          </div>
          <SnackBar
            open={this.props.snackBarOpen}
            onClose={() =>
              this.props.dispatch(
                handleSnackBar({ snackBarOpen: false, snackBarMsg: '' })
              )
            }
            msg={this.props.snackBarMsg}
          />
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    // processData: state.processReducer.processData,
    searchResult: state.dashboard.searchResult,
    // toggleGridView: state.dashboard.toggleGridView,
    currentView: state.dashboard.currentView,
    // processes: state.processReducer.processes,
    animals: state.animalsReducer.animals,
    animalSpecies: state.animalsReducer.animalSpecies,
    animalsStats: state.animalsReducer.animalsStats,
    labAnimals: state.animalsReducer.labAnimals,
    snackBarOpen: state.dashboard.snackBarOpen,
    snackBarMsg: state.dashboard.snackBarMsg
  };
}

export default connect(mapStateToProps)(PositionSearch);
