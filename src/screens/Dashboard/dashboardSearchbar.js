import React, { Component } from 'react';
import { uniqWith, isEqual } from 'lodash';
import { Row, Col, Button } from 'react-bootstrap';
import { Select } from '../../components/Dropdown';
import {
  filterDataOnSearch,
  applyingFilters,
  searchOutputFunc
} from '../../helpers/SearchData';

class DashboardSearchBar extends Component {
  constructor() {
    super();
    this.state = {
      toggleAf: false,
      searchString: '',
      selectedProcess: [],
      selectedSubProcess: [],
      selectedRegion: [],
      selectedCountry: []
    };
    this.toggleElement = this.toggleElement.bind(this);
    this.captureSearchString = this.captureSearchString.bind(this);
    this.getDropDownsData = this.getDropDownsData.bind(this);
    this.applyFilter = this.applyFilter.bind(this);
  }

  getDropDownsData(data) {
    let pNames = [];
    let pNamesOb = {};

    let spNames = [];
    let spNamesOb = {};

    let regionNames = [];
    let regOb = {};

    let countryNames = [];
    let counOb = {};
    data.map(d => {
      pNamesOb = {};
      spNamesOb = {};
      regOb = {};
      counOb = {};
      pNamesOb.label = d.processName;
      pNamesOb.value = d.processName;
      spNamesOb.label = d.subProcess;
      spNamesOb.value = d.subProcess;
      regOb.label = d.region;
      regOb.value = d.region;
      counOb.label = d.country;
      counOb.value = d.country;
      pNames.push(pNamesOb);
      spNames.push(spNamesOb);
      regionNames.push(regOb);
      countryNames.push(counOb);
      return null;
    });

    if (this.state.selectedProcess.length > 0) {
      const p = applyingFilters(
        this.state.selectedProcess,
        this.props.processData,
        'processName'
      );
      spNames = [];
      regionNames = [];
      countryNames = [];
      p.map(d => {
        spNamesOb = {};
        spNamesOb.label = d.subProcess;
        spNamesOb.value = d.subProcess;
        spNames.push(spNamesOb);
        regOb = {};
        regOb.label = d.region;
        regOb.value = d.region;
        regionNames.push(regOb);
        counOb = {};
        counOb.label = d.country;
        counOb.value = d.country;
        countryNames.push(counOb);
        return null;
      });
    }
    if (this.state.selectedSubProcess.length > 0) {
      const p = applyingFilters(
        this.state.selectedSubProcess,
        this.props.processData,
        'subProcess'
      );
      pNames = [];
      regionNames = [];
      countryNames = [];
      p.map(d => {
        pNamesOb = {};
        pNamesOb.label = d.processName;
        pNamesOb.value = d.processName;
        pNames.push(pNamesOb);
        regOb = {};
        regOb.label = d.region;
        regOb.value = d.region;
        regionNames.push(regOb);
        counOb = {};
        counOb.label = d.country;
        counOb.value = d.country;
        countryNames.push(counOb);
        return null;
      });
    }
    if (this.state.selectedRegion.length > 0) {
      const p = applyingFilters(
        this.state.selectedRegion,
        this.props.processData,
        'region'
      );
      spNames = [];
      pNames = [];
      countryNames = [];
      p.map(d => {
        spNamesOb = {};
        spNamesOb.label = d.subProcess;
        spNamesOb.value = d.subProcess;
        spNames.push(spNamesOb);
        pNamesOb = {};
        pNamesOb.label = d.processName;
        pNamesOb.value = d.processName;
        pNames.push(pNamesOb);
        counOb = {};
        counOb.label = d.country;
        counOb.value = d.country;
        countryNames.push(counOb);
        return null;
      });
    }
    if (this.state.selectedCountry.length > 0) {
      const p = applyingFilters(
        this.state.selectedCountry,
        this.props.processData,
        'country'
      );
      pNames = [];
      regionNames = [];
      spNames = [];
      p.map(d => {
        pNamesOb = {};
        pNamesOb.label = d.processName;
        pNamesOb.value = d.processName;
        pNames.push(pNamesOb);
        regOb = {};
        regOb.label = d.region;
        regOb.value = d.region;
        regionNames.push(regOb);
        spNamesOb = {};
        spNamesOb.label = d.subProcess;
        spNamesOb.value = d.subProcess;
        spNames.push(spNamesOb);
        return null;
      });
    }
    const processDD = uniqWith(pNames, isEqual);
    const subprocessDD = uniqWith(spNames, isEqual);
    const regionDD = uniqWith(regionNames, isEqual);
    const countryDD = uniqWith(countryNames, isEqual);
    return { processDD, subprocessDD, regionDD, countryDD };
  }

  toggleElement = () => this.setState({ toggleAf: !this.state.toggleAf });
  captureSearchString = ({ target: { value } }) => {
    if (value !== '') {
      this.setState({ searchString: value });
      const filteredData = filterDataOnSearch(
        value.toLowerCase(),
        this.props.processData
      );
      const obj = {};
      if (filteredData.length === 0) {
        obj.noSearchFound = true;
      }
      this.props.searchResult(filteredData, obj);
    }
    if (value === '') {
      const obj = { noSearchFound: false };
      this.props.searchResult([], obj);
    }
  };
  applyFilter() {
    let processFiltered = [];
    let subprocessFiltered = [];
    let regionFiltered = [];
    let countryFiltered = [];
    if (this.state.selectedProcess.length > 0) {
      processFiltered = applyingFilters(
        this.state.selectedProcess,
        this.props.processData,
        'processName'
      );
    }
    if (this.state.selectedSubProcess.length > 0) {
      subprocessFiltered = applyingFilters(
        this.state.selectedSubProcess,
        this.props.processData,
        'subProcess'
      );
    }
    if (this.state.selectedRegion.length > 0) {
      regionFiltered = applyingFilters(
        this.state.selectedRegion,
        this.props.processData,
        'region'
      );
    }
    if (this.state.selectedCountry.length > 0) {
      countryFiltered = applyingFilters(
        this.state.selectedCountry,
        this.props.processData,
        'country'
      );
    }
    const searchOutput = searchOutputFunc(
      processFiltered,
      subprocessFiltered,
      regionFiltered,
      countryFiltered
    );
    const obj = { noSearchFound: false };
    this.props.searchResult(searchOutput, obj);
    this.toggleElement();
  }
  render() {
    const props = { ...this.props };
    const ddData = this.getDropDownsData(props.processData);
    return (
      <Row>
        <Col lg={10} md={10} sm={10} className="no-padding">
          <div className="search-down">
            <input
              type="text"
              className="form-control"
              placeholder="Search"
              name="search"
              onChange={this.captureSearchString}
            />
            <Button className="search-drop-down" onClick={this.toggleElement}>
              <i className="fas fa-chevron-down" />
            </Button>

            <div
              className={`search-dropdown ${
                this.state.toggleAf ? 'active' : ''
              }`}
            >
              <h1>ADVANCED KEYWORD SEARCH</h1>
              <div className="form">
                <div className="margin-bottom10">
                  <label>Process Name</label>
                  <Select
                    id="client"
                    className="groupby-select full-width"
                    options={ddData.processDD}
                    onChange={e => {
                      this.setState({ selectedProcess: e });
                    }}
                    placeholder="Process Name"
                    multi
                  />
                </div>
                <div className="margin-bottom10">
                  <label>Sub Process Name</label>
                  <Select
                    id="clientlocation"
                    className="groupby-select full-width"
                    options={ddData.subprocessDD}
                    onChange={e => {
                      this.setState({ selectedSubProcess: e });
                    }}
                    placeholder="Sub Process Name"
                    multi
                  />
                </div>
                <div className="margin-bottom10">
                  <label>Region</label>
                  <Select
                    id="clientposition"
                    className="groupby-select full-width"
                    options={ddData.regionDD}
                    onChange={e => {
                      this.setState({ selectedRegion: e });
                    }}
                    placeholder="Region"
                    multi
                  />
                </div>
                <div className="margin-bottom10">
                  <label>Country</label>
                  <Select
                    id="clientposition"
                    className="groupby-select full-width"
                    options={ddData.countryDD}
                    onChange={e => {
                      this.setState({ selectedCountry: e });
                    }}
                    placeholder="Country"
                    multi
                  />
                </div>
                <Row>
                  <Col lg={6} md={6} sm={6} className="np-left">
                    <Button
                      type="button"
                      className="btn btn-success full-width"
                      bsSize="small"
                      onClick={this.applyFilter}
                    >
                      Apply
                    </Button>
                  </Col>
                  <Col lg={6} md={6} sm={6} className="np-right">
                    <Button
                      type="button"
                      className="full-width"
                      bsSize="small"
                      onClick={this.toggleElement}
                    >
                      Cancel
                    </Button>
                  </Col>
                </Row>
              </div>
            </div>
          </div>
        </Col>
        <Col lg={2} md={2} sm={2} className="no-padding">
          {/* <Button className="search-button">
            <i className="fas fa-search" />
          </Button> */}
        </Col>
      </Row>
    );
  }
}

export default DashboardSearchBar;
