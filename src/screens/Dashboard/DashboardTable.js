import React, { Component } from 'react';
// import { Row, Col } from 'react-bootstrap';
import ReactTable from 'react-table';
import 'react-table/react-table.css';
import selectTableHOC from 'react-table/lib/hoc/selectTable';
import treeTableHOC from 'react-table/lib/hoc/treeTable';
// import Select from '../../components/Dropdown/Select';
// import ActionButtons from '../../components/ActionButtons/ActionButtons';
// import { groupByOptions } from './InitialFormState';

const SelectTreeTable = selectTableHOC(treeTableHOC(ReactTable));

/* eslint-disable */

const getNodes = (data, node = []) => {
  data.forEach(item => {
    if (item.hasOwnProperty('_subRows') && item._subRows) {
      node = getNodes(item._subRows, node);
    } else {
      node.push(item._original);
    }
  });
  return node;
};

/* eslint-enable */

class DashboardTable extends Component {
  constructor(props) {
    super(props);
    this.state = {
      expanded: {},
      selection: [],
      selectAll: false,
      groupBy: []
    };
  }

  onExpandedChange = expanded => {
    this.setState({ expanded });
  };

  toggleSelection = key => {
    let selection = [...this.state.selection];
    const keyIndex = selection.indexOf(key);
    if (keyIndex >= 0) {
      selection = [
        ...selection.slice(0, keyIndex),
        ...selection.slice(keyIndex + 1)
      ];
    } else {
      selection.push(key);
    }
    this.handleRowSelect({ selection });
  };

  toggleAll = () => {
    const id = '_id';
    const selectAll = !this.state.selectAll;
    const selection = [];
    if (selectAll) {
      const wrappedInstance = this.selectTable.getWrappedInstance();
      const currentRecords = wrappedInstance.getResolvedState().sortedData;
      const nodes = getNodes(currentRecords);
      nodes.forEach(item => {
        selection.push(item[id]);
      });
    }
    this.handleRowSelect({ selectAll, selection });
  };

  isSelected = key => this.state.selection.includes(key);

  coulmnSearch = (filter, row) =>
    row[filter.id].toLowerCase().includes(filter.value.toLowerCase());

  handleRowSelect = newState => this.setState({ ...newState });

  handleTableDropdownChange = name => value => this.setState({ [name]: value });

  render() {
    const { toggleSelection, toggleAll, isSelected, onExpandedChange } = this;
    const { selectAll } = this.state;
    const extraProps = {
      selectAll,
      isSelected,
      toggleAll,
      toggleSelection,
      selectType: 'checkbox',
      expanded: this.state.expanded,
      onExpandedChange
    };
    // const { tableData } = this.props;
    // const template = tableData.length ? tableData[0].template : null;
    return (
      <div>
        {/* <Row className="margin-bottom10">
          <Col lg={3} md={4} className="action-wrap">
            <ActionButtons
              template={template}
              processes={this.state.selection}
              isEditorRole
              showPPT
              showPDF
              showPreview={false}
              showFinalize={false}
            />
          </Col>
          <Col lg={6} md={12} className="no-padding">
            <div className="groupby-select">
              <Select
                id="groupBy"
                className="custom-select groupby-select"
                placeholder="Group By"
                onChange={this.handleTableDropdownChange('groupBy')}
                options={groupByOptions}
                value={this.state.groupBy}
                multi
              />
            </div>
          </Col>
        </Row> */}

        <div id="dasboard-grid" style={{ position: 'relative' }}>
          <SelectTreeTable
            ref={r => {
              this.selectTable = r;
            }}
            data={this.props.rows}
            columns={this.props.columns}
            defaultPageSize={10}
            className="-striped -highlight"
            freezWhenExpanded
            filterable={this.props.filterable}
            defaultFilterMethod={this.props.coulmnSearch}
            onRowSelect={this.handleRowSelect}
            pivotBy={this.state.groupBy.map(option => option.value)}
            {...extraProps}
          />
          {/* <ReactTable
          data={this.props.rows}
          columns={this.props.columns}
          defaultPageSize={10}
          className="-striped -highlight"
          freezWhenExpanded
          filterable={this.props.filterable}
          defaultFilterMethod={this.props.coulmnSearch}
          pivotBy={this.props.pivotBy}
        /> */}
        </div>
      </div>
    );
  }
}

export default DashboardTable;
