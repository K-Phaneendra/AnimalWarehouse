import React, { Component } from 'react';
import { Row, Col, Button } from 'react-bootstrap';
import { keyBy, map, merge } from 'lodash';
import Titles from '../../data/DashboardTitles.json';
import ViewContentTitleModal from './viewContentTileModal';
// import MyDrawer from '../../components/Drawer/Drawer';
import { LargeModal } from '../../components/Modals';
// import { Button } from '@material-ui/core';
import Pagination from '../../components/Pagination/Pagination';

class ViewContentGrid extends Component {
  constructor() {
    super();
    this.state = {
      // right: false,
      show: false,
      loopIndex: ''
    };
    this.generateGridView = this.generateGridView.bind(this);
    // this.openDrawer = this.openDrawer.bind(this);
    // this.getDrawer = this.getDrawer.bind(this);
    this.getLargeModal = this.getLargeModal.bind(this);
    this.handleShow = this.handleShow.bind(this);
    this.handleClose = this.handleClose.bind(this);
    // this.closeDrawer = this.closeDrawer.bind(this);
  }

  // getDrawer(d, i) {
  //   if (this.state.loopIndex === i) {
  //     return (
  //       <MyDrawer
  //         anchor="right"
  //         open={this.state.right}
  //         onClose={() => this.closeDrawer('right', false)}
  //       >
  //         <ViewContentTitleModal data={d} />
  //       </MyDrawer>
  //     );
  //   }
  //   return null;
  // }
  onSlideChange = number => this.props.handlePaginationChange(number);

  getLargeModal(d, i) {
    if (this.state.loopIndex === i) {
      return (
        <LargeModal
          show={this.state.show}
          onHide={this.handleClose}
          header="Contact Details"
          actionbuttontemplate={d.template}
          actionbuttonselection={[d]}
        >
          <ViewContentTitleModal data={d} />
        </LargeModal>
      );
    }
    return null;
  }

  // openDrawer(side, open, index) {
  //   this.setState({
  //     [side]: open,
  //     loopIndex: index
  //   });
  // }
  // closeDrawer(side, close) {
  //   this.setState({
  //     [side]: close
  //   });
  // }
  handleShow(i) {
    this.setState({ show: true, loopIndex: i });
  }
  handleClose() {
    this.setState({ show: false });
  }
  generateGridView(data, processes) {
    const lookup = keyBy(processes, 'id');
    const dataPopulated = map(data, x =>
      merge(x, { process: lookup[x.process] })
    );
    return dataPopulated.map((d, i) => (
      <div key={i}>
        <Row className="border-bottom padding-vertical" key={i}>
          <Col lg={2} md={2}>
            <div className="gridview-profile-pic text-center">
              <img
                className="sidebar-logo-image avatar"
                src={d.process.logo}
                alt="Go to index"
              />
            </div>
          </Col>
          <Col lg={10} md={10} sm={12}>
            <Row>
              <Col lg={6} md={6} sm={6} className="np-left process-subprocess">
                <h1>
                  <span title={Titles.processName}>{d.processName}</span>
                </h1>{' '}
                -{' '}
                <h2>
                  <span title={Titles.subProcess}>{d.subProcess}</span>
                </h2>
              </Col>
              <Col lg={6} md={6} sm={6} className="np-left text-right">
                <h3 title="Country, Region" style={{ margin: '0px' }}>
                  <div className="country-flag">
                    <span
                      className={`flag-icon flag-icon-${d.alpha2Code.toLowerCase()}`}
                    />
                  </div>
                  {/* <i className="fas fa-map-marker-alt gray" /> */}
                  &nbsp;
                  {d.country}, {d.region} -{' '}
                  <span title={Titles.timezone}>{d.timezone}</span>
                </h3>
              </Col>
            </Row>
            <div>
              <div>
                <h3>
                  <span title={Titles.businessUnit}>
                    BU: <span className="green-text">{d.businessUnit}</span>
                  </span>{' '}
                  |{' '}
                  <span title={Titles.ssc}>
                    SSC: <span className="green-text">{d.ssc}</span>
                  </span>{' '}
                  |{' '}
                  <span title={Titles.headPersonSSC}>
                    SSC Head:{' '}
                    <span className="green-text">{d.headPersonSSC}</span>
                  </span>
                </h3>
                <hr />
              </div>
              <Row>
                {/* <Col lg={3} md={3} sm={12} className="no-padding">
                  <div>
                    <h3 title={Titles.processAddress}>
                      <span style={{ fontSize: '14px' }}>Postal Address:</span>
                    </h3>
                    <h5
                      style={{
                        color: 'green',
                        fontSize: '13px',
                        lineHeight: '20px'
                      }}
                    >
                      {d.processAddress}
                    </h5>
                  </div>
                </Col> */}
                <Col lg={12} md={12} sm={12} className="no-padding">
                  <div>
                    <Row className="cardFooter-labels">
                      {/* <Col lg={3} md={3} sm={3} className="np-left">
                          <h3>Name:</h3>
                          <h5>{d.person}</h5>
                        </Col> */}
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.primaryContact}>Primary Contact:</h3>
                        <h5>{d.primaryContact}</h5>
                      </Col>
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.seniorProcessManager}>
                          Sr. Process Manager:
                        </h3>
                        <h5>{d.seniorProcessManager}</h5>
                      </Col>
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.workingWeek}>Working Week: </h3>
                        <h5>{d.workingWeek}</h5>
                      </Col>
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.serviceHours}>Service Hours: </h3>
                        <h5>
                          {d.localServiceHoursStart} - {d.localServiceHoursEnd}
                        </h5>
                      </Col>
                    </Row>
                    <Row className="cardFooter-labels">
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.email}>Email:</h3>
                        <a href={`mailto:${d.email}`}>
                          <h5>{d.email}</h5>
                        </a>
                      </Col>
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.phoneNumber}>Phone Number:</h3>
                        <a href={`tel:${d.phoneNumber}`}>
                          <h5>{d.phoneNumber}</h5>
                        </a>
                      </Col>
                      <Col lg={3} md={3} sm={3} className="np-left">
                        <h3 title={Titles.fastDial1}>Fast Dial 1:</h3>
                        <a href={`tel:${d.fastDial1}`}>
                          <h5>{d.fastDial1}</h5>
                        </a>
                      </Col>

                      <Col lg={3} md={3} sm={3} className="np-left text-right">
                        <Button
                          className="btn btn-success full-width"
                          bsSize="small"
                          // onClick={() => this.openDrawer('right', true, i)}
                          onClick={() => this.handleShow(i)}
                        >
                          More <i className="fas fa-angle-double-right" />
                        </Button>
                      </Col>
                    </Row>
                  </div>
                </Col>
              </Row>
            </div>
          </Col>
        </Row>
        {/* <div>{this.getDrawer(d, i)}</div> */}
        {this.getLargeModal(d, i)}
      </div>
    ));
  }

  render() {
    const props = { ...this.props };
    const sliceFrom = (props.activePage - 1) * 8;
    const displayData = props.processData.slice(sliceFrom, sliceFrom + 8);
    return (
      <div
        className={`search-result-wrap ${
          props.togglecandidate ? 'active' : ''
        }`}
      >
        {this.generateGridView(displayData, props.processes)}
        <div className="top-pagination">
          <Pagination
            activePage={props.activePage}
            totalPages={props.processData.length}
            onChange={this.onSlideChange}
          />
        </div>
      </div>
    );
  }
}

export default ViewContentGrid;
