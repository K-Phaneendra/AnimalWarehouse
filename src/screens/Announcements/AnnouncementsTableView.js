import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
import FormDialog from '../../components/Modals/FormDialog';
import CreateAnnouncement from './CreateAnnouncement';
import { createAnnouncement } from '../../actions/animalActions';
import { handleSnackBar } from '../../actions/DashboardAction';
import {
  generateAnimalSpecieOptions,
  generateAttributeOptions
} from '../../helpers/reusableFunctions';

class AnnouncementsTableView extends Component {
  constructor() {
    super();
    this.state = {
      openCreateAnnouncement: false,
      disableSubmit: true,
      cartData: [{}],
      attributesCart: [{}]
    };
  }
  onSubmit = () => {
    console.log('loggedinuser', this.props.loggedInUser);
    const dbObj = {
      animals: this.state.cartData,
      attributes: this.state.attributesCart,
      createdBy: this.props.loggedInUser.id,
      createdDate: new Date(),
      status: 'PENDING'
    };
    this.props.dispatch(createAnnouncement(dbObj, this.callBack));
  };
  incrementAttributeCart = () => {
    const { attributesCart } = this.state;
    const incrementedCartData = this.incrementedCartData(attributesCart);
    this.setState({ attributesCart: incrementedCartData });
  };
  incrementedCartData = cartData => {
    cartData.push({});
    return cartData;
  };
  incrementCart = () => {
    const { cartData } = this.state;
    const incrementedCartData = this.incrementedCartData(cartData);
    this.setState({ cartData: incrementedCartData });
  };
  selectSpecie = (e, count) => {
    const { cartData } = this.state;
    cartData.map((values, index) => {
      if (index === count) {
        // eslint-disable-next-line
        values.specie = e.value;
        // eslint-disable-next-line
        values.selectedSpecie = e;
      }
      return null;
    });
    this.setState({ cartData });
  };
  textOnBlur = (e, count) => {
    const { cartData } = this.state;
    cartData.map((values, index) => {
      if (index === count) {
        if (e.target.type === 'number') {
          // eslint-disable-next-line
          values[e.target.name] = Number(e.target.value);
        } else {
          // eslint-disable-next-line
          values[e.target.name] = e.target.value;
        }
      }
      return null;
    });
    this.setState({ cartData });
  };
  attributeValuesOnBlur = (e, count) => {
    const { attributesCart } = this.state;
    attributesCart.map((values, index) => {
      if (index === count) {
        if (e.target.type === 'number') {
          // eslint-disable-next-line
          values[e.target.name] = Number(e.target.value);
        } else {
          // eslint-disable-next-line
          values[e.target.name] = e.target.value;
        }
      }
      return null;
    });
    this.setState({ attributesCart });
  };
  decrementCart = count => {
    const { cartData } = this.state;
    const decrementedCart = [];
    cartData.map((values, index) => {
      if (count === index) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    if (decrementedCart.length === 0) {
      decrementedCart.push({});
    }
    this.setState({ cartData: decrementedCart });
  };
  decrementAttributeCart = count => {
    const { attributesCart } = this.state;
    const decrementedCart = [];
    attributesCart.map((values, index) => {
      if (count === index) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    if (decrementedCart.length === 0) {
      decrementedCart.push({});
    }
    this.setState({ attributesCart: decrementedCart });
  };
  selectAttribute = (e, count) => {
    const { attributesCart } = this.state;
    attributesCart.map((values, index) => {
      if (index === count) {
        // eslint-disable-next-line
        values.attribute = e.value;
        // eslint-disable-next-line
        values.selectedAttribute = e;
      }
      return null;
    });
    this.setState({ attributesCart });
  };

  callBack = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.setState({ openCreateAnnouncement: false });
    }
  };
  render() {
    const { animalSpecies, attributes } = this.props;
    let { disableSubmit } = this.state;
    const animalOptions = generateAnimalSpecieOptions(animalSpecies);
    const attributeOptions = generateAttributeOptions(attributes);
    const { cartData, attributesCart } = this.state;
    if (
      cartData[0].specie &&
      cartData[0].quantity &&
      attributesCart[0].attribute &&
      attributesCart[0].min &&
      attributesCart[0].max
    ) {
      disableSubmit = false;
    }
    return (
      <div>
        <Row className="margin-bottom10">
          <Col lg={3} md={4} className="action-wrap">
            <ul className="action-buttons">
              <li>
                <i
                  className="fas fa-plus"
                  aria-hidden="true"
                  onClick={() =>
                    this.setState({ openCreateAnnouncement: true })
                  }
                  title="Create Announcement"
                />
              </li>
            </ul>
          </Col>
        </Row>

        <FormDialog
          open={this.state.openCreateAnnouncement}
          onClose={() => this.setState({ openCreateAnnouncement: false })}
          formTitle="Create Announcement"
          formContent={
            <CreateAnnouncement
              animalSpecies={animalSpecies}
              attributes={attributes}
              cartData={cartData}
              animalOptions={animalOptions}
              incrementCart={this.incrementCart}
              selectSpecie={this.selectSpecie}
              textOnBlur={this.textOnBlur}
              decrementCart={this.decrementCart}
              attributesCart={attributesCart}
              attributeOptions={attributeOptions}
              incrementAttributeCart={this.incrementAttributeCart}
              selectAttribute={this.selectAttribute}
              attributeTextOnBlur={this.attributeTextOnBlur}
              attributeValuesOnBlur={this.attributeValuesOnBlur}
              decrementAttributeCart={this.decrementAttributeCart}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.onSubmit}
        />
      </div>
    );
  }
}

export default connect()(AnnouncementsTableView);
