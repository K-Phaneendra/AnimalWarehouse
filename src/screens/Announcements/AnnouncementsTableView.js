import React, { Component } from 'react';
import { connect } from 'react-redux';
import { announcementTableColumns } from '../Dashboard/TableColumns';
import CheckBoxTable from '../../components/Table/CheckboxTable';

const objectId = '_id';

class AnnouncementsTableView extends Component {
  getSelectedRowData = (selection, announcements) => {
    let selectedRowObj = {};
    announcements.map(anncmnts => {
      if (selection.indexOf(anncmnts[objectId]) >= 0) {
        selectedRowObj = anncmnts;
      }
      return null;
    });
    return selectedRowObj;
  };

  toggleSelection = (selectedId, announcements) => {
    const selectedRowDataObj = this.getSelectedRowData(
      selectedId,
      announcements
    );
    let createdCartData = [];
    let createdAttributesData = [];
    if (selectedRowDataObj.animals) {
      let animalsObj = {};
      selectedRowDataObj.animals.map(anmls => {
        animalsObj = { ...anmls };
        animalsObj.selectedSpecie = {
          _id: anmls.specie[objectId],
          value: anmls.specie[objectId],
          label: anmls.specie.name
        };
        createdCartData.push(animalsObj);
        return null;
      });
      // createdCartData = selectedRowDataObj.animals;
    } else {
      createdCartData = [{}];
    }
    if (selectedRowDataObj.attributes) {
      let attributesObj = {};
      selectedRowDataObj.attributes.map(attr => {
        attributesObj = { ...attr };
        attributesObj.selectedAttribute = {
          _id: attr.attribute[objectId],
          value: attr.attribute[objectId],
          label: attr.attribute.name
        };
        createdAttributesData.push(attributesObj);
        return null;
      });
      // createdAttributesData = selectedRowDataObj.attributes;
    } else {
      createdAttributesData = [{}];
    }
    this.props.changeParentState({
      selection: selectedId,
      cartData: createdCartData,
      attributesCart: createdAttributesData,
      announcementName: selectedRowDataObj.name,
      selectedStatusOnEdit: {
        value: selectedRowDataObj.status,
        label: selectedRowDataObj.status
      },
      selectedRowData: selectedRowDataObj
    });
  };

  render() {
    const { announcements } = this.props;
    return (
      <div>
        <div>
          <CheckBoxTable
            toggleSelection={selection =>
              this.toggleSelection(selection, announcements)
            }
            toggleAll={(selectAll, selection) =>
              this.props.changeParentState({ selectAll, selection })
            }
            selection={this.props.selection}
            selectAll={this.props.selectAll}
            data={announcements}
            columns={announcementTableColumns}
          />
        </div>
      </div>
    );
  }
}

export default connect()(AnnouncementsTableView);
