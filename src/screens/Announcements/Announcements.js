import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Row, Col } from 'react-bootstrap';
import ReactSelect from '../../components/Dropdown/ReactSelect';
import TextField from '../../components/TextField/TextField';
import DashboardToggleView from '../Dashboard/dashboardToggleView';
// import AnnouncementFormsView from './AnnouncementFormsView';
import {
  fetchAnimals,
  createAnnouncement,
  updateAnnouncement
} from '../../actions/animalActions';
import AnnouncementsTableView from './AnnouncementsTableView';
import { handleSnackBar } from '../../actions/DashboardAction';
import { SnackBar } from '../../components/SnackBar';
import AnnouncementGridView from './AnnouncementsGridView';
import FormDialog from '../../components/Modals/FormDialogLarge';
import CreateAnnouncement from './CreateAnnouncement';
import {
  generateAnimalSpecieOptions,
  generateAttributeOptions
} from '../../helpers/reusableFunctions';
import MyLargeModal from '../../components/Modals/LargeModal';
import ViewAnnouncements from './viewAnnouncements';
import {
  announcemetAnimalColumns,
  announcemetAttributeColumns
} from '../Dashboard/TableColumns';
import CreateNewAnnoumcements from './CreateNewAnnoumcements';

class Announcements extends Component {
  constructor() {
    super();
    this.state = {
      openCreateAnnouncement: false,
      openCreateAnnouncement2: false,
      disableSubmit: true,
      cartData: [],
      attributesCart: [{}],
      announcementName: '',
      selection: [],
      selectAll: false,
      selectedStatusOnEdit: {},
      selectedRowData: {},
      openEditAnnouncement: false,
      openViewAnnouncement: false,
      announcementData: [],
      methodsData: [],
      paramsData: [],
      desription: '',
      selectedSpecies: '',
      quantity: 0
    };
  }
  componentDidMount() {
    this.props.dispatch(fetchAnimals());
  }
  onSubmit = () => {
    console.log('loggedinuser', this.props.loggedInUser);
    const dbObj = {
      name: this.state.announcementName,
      animals: this.state.cartData,
      attributes: this.state.attributesCart,
      createdBy: this.props.loggedInUser.id,
      createdDate: new Date(),
      status: 'PENDING'
    };
    this.props.dispatch(createAnnouncement(dbObj, this.callBack));
  };
  onSubmitEdit = () => {
    console.log('loggedinuser', this.props.loggedInUser);
    const dbObj = {
      name: this.state.announcementName,
      animals: this.state.cartData,
      attributes: this.state.attributesCart,
      createdBy: this.props.loggedInUser.id,
      status: this.state.selectedStatusOnEdit.value
    };
    this.props.dispatch(
      updateAnnouncement(dbObj, this.state.selection[0], this.callBack)
    );
  };
  callBack = APIresponse => {
    this.props.dispatch(
      handleSnackBar({ snackBarOpen: true, snackBarMsg: APIresponse.message })
    );
    if (!APIresponse.error) {
      this.setState({
        openCreateAnnouncement: false,
        openEditAnnouncement: false
      });
    }
  };
  changeParentState = obj => {
    Object.keys(obj).map(key => {
      const obtainedKey = key;
      this.setState({ [obtainedKey]: obj[key] });
      return null;
    });
  };
  incrementAttributeCart = () => {
    const { attributesCart } = this.state;
    const incrementedCartData = this.incrementedCartData(attributesCart);
    this.setState({ attributesCart: incrementedCartData });
  };
  incrementedCartData = (cartData, animalOptions) => {
    console.log(animalOptions);
    cartData.push(
      {
        _id: Number(cartData.length + 1),
        species: <ReactSelect
          options={animalOptions}
          name="animalSpecie"
          // value={selectedSpecie}
          onChange={e => this.selectSpecie(e, Number(cartData.length))}
        />,
        quantity: <TextField
          // key={`${count}_${values.quantity}`}
          // defaultValue={values.quantity}
          label="Number of Animals"
          type="number"
          name="quantity"
          onBlur={e => this.textOnBlur(e, Number(cartData.length))}
        />
      }
    );
    return cartData;
  };
  incrementCart = (animalOptions) => {
    const { cartData } = this.state;
    const incrementedCartData = this.incrementedCartData(cartData, animalOptions);
    this.setState({ cartData: incrementedCartData });
  };
  selectSpecie = (e, count) => {
    const { cartData, announcementData } = this.state;
    cartData.map((values, index) => {
      if (index + 1 === count) {
        // eslint-disable-next-line
        values.specie = e.value;
        // eslint-disable-next-line
        values.selectedSpecie = e;
      }
      return null;
    });
    announcementData.species = [{
      specieId: e.value
    }];
    this.setState({ cartData, announcementData, selectedSpecies: e.value });
  };
  textOnBlur = (e, count) => {
    const { cartData, announcementData } = this.state;
    // console.log(announcementData);
    cartData.map((values, index) => {
      if (index + 1 === count) {
        if (e.target.type === 'number') {
          // eslint-disable-next-line
          values[e.target.name] = Number(e.target.value);
        } else {
          // eslint-disable-next-line
          values[e.target.name] = e.target.value;
        }
      }
      return null;
    });
    // console.log(announcementData);
    announcementData.species = [{
      quantity: Number(e.target.value)
    }];
    // console.log([e.target.name]);
    // console.log([e.target.name][0]);
    if ([e.target.name][0] === 'quantity') {
      this.setState({ quantity: Number(e.target.value) });
    }
    this.setState({ cartData, announcementData });
  };
  decrementCart = count => {
    console.log('decremetn', count);
    const { cartData, selectedRowData } = this.state;
    const objectId = '_id';
    const decrementedCart = [];
    cartData.map((values, index) => {
      if (selectedRowData[objectId] === index + 1) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    if (decrementedCart.length === 0) {
      decrementedCart.push({});
    }
    console.log('decrementedcart', decrementedCart);
    this.setState({ cartData: decrementedCart });
  };
  selectAttribute = (e, count) => {
    const { attributesCart } = this.state;
    attributesCart.map((values, index) => {
      if (index === count) {
        // eslint-disable-next-line
        values.attribute = e.value;
        // eslint-disable-next-line
        values.selectedAttribute = e;
      }
      return null;
    });
    this.setState({ attributesCart });
  };
  attributeValuesOnBlur = (e, count) => {
    const { attributesCart } = this.state;
    attributesCart.map((values, index) => {
      if (index === count) {
        if (e.target.type === 'number') {
          // eslint-disable-next-line
          values[e.target.name] = Number(e.target.value);
        } else {
          // eslint-disable-next-line
          values[e.target.name] = e.target.value;
        }
      }
      return null;
    });
    this.setState({ attributesCart });
  };
  decrementAttributeCart = count => {
    const { attributesCart } = this.state;
    const decrementedCart = [];
    attributesCart.map((values, index) => {
      if (count === index) {
        // do nothing
      } else {
        decrementedCart.push(values);
      }
      return null;
    });
    if (decrementedCart.length === 0) {
      decrementedCart.push({});
    }
    this.setState({ attributesCart: decrementedCart });
  };
  announcementName = e => {
    const { announcementData } = this.state;
    announcementData.announcementName = e.target.value;
    this.setState({ announcementData });
    this.setState({ announcementName: e.target.value });
  };
  incrementMethodsCart = () => {
    const { methodsData } = this.state;
    methodsData.push(
      {
        _id: Number(methodsData.length + 1),
        method: <TextField
          label="Species method"
          type="text"
          name="method"
        // onBlur={e => this.textOnBlur(e)}
        />,
        min: <TextField
          label="Min"
          type="number"
          name="min"
          // onBlur={e => this.textOnBlur(e)}
        />,
        max: <TextField
          label="Max"
          type="number"
          name="max"
          // onBlur={e => this.textOnBlur(e)}
        />,
        units: <TextField
          label="Units"
          type="number"
          name="units"
          // onBlur={e => this.textOnBlur(e)}
        />,
        material: <TextField
          label="Material"
          type="text"
          name="material"
        // onBlur={e => this.textOnBlur(e)}
        />
      }
    );
    this.setState({ methodsData });
    return methodsData;
  }
  incrementParametersCart = (attributeOptions) => {
    const { paramsData } = this.state;
    paramsData.push(
      {
        _id: Number(paramsData.length + 1),
        parameter: <ReactSelect
          options={attributeOptions}
          name="parameters"
          // value={values.selectedSpecie}
          // onChange={e => this.selectParameters(e)}
        />,
        min: <TextField
          label="Min"
          type="number"
          name="min"
          // onBlur={e => this.textOnBlur(e)}
        />,
        max: <TextField
          label="Max"
          type="number"
          name="max"
          // onBlur={e => this.textOnBlur(e)}
        />
      }
    );
    this.setState({ paramsData });
    return paramsData;
  }
  render() {
    console.log(this.state.announcementName, this.state.selectedSpecies, this.state.quantity);
    const {
      loggedInUser,
      currentView,
      animalSpecies,
      attributes,
      announcements
    } = this.props;
    console.log('attributes', attributes);
    const tileView = currentView === 'tileView';
    const tableView = currentView === 'tableView';
    let { disableSubmit } = this.state;
    const animalOptions = generateAnimalSpecieOptions(animalSpecies);
    const attributeOptions = generateAttributeOptions(attributes);
    const {
      openCreateAnnouncement,
      cartData,
      attributesCart,
      announcementName,
      announcementData,
      methodsData,
      paramsData
     } = this.state;
    if (
    //   cartData[0].specie &&
    //   cartData[0].quantity &&
    //   attributesCart[0].attribute &&
    //   attributesCart[0].min &&
    //   attributesCart[0].max &&
      announcementName !== ''
    ) {
      disableSubmit = false;
    }
    return (
      <div className="position-search-wrap">
        <div className="browse-wrap">
          <Row className="padding-top margin-bottom">
            <Col lg={6} md={6} sm={6} className="action-wrap">
              <ul className="action-buttons">
                <li>
                  <i
                    className="fas fa-plus"
                    aria-hidden="true"
                    onClick={() =>
                      this.setState({ openCreateAnnouncement: true })
                    }
                    title="Create Announcement"
                  />
                </li>
                {this.state.selection.length === 1 ? (
                  <li>
                    <i
                      className="far fa-edit"
                      aria-hidden="true"
                      onClick={() =>
                        this.setState({ openEditAnnouncement: true })
                      }
                      title="Edit Announcement"
                    />
                  </li>
                ) : (
                  ''
                )}
                {this.state.selection.length === 1 ? (
                  <li>
                    <i
                      className="fa fa-eye"
                      aria-hidden="true"
                      onClick={() =>
                        this.setState({ openViewAnnouncement: true })
                      }
                      title="View Announcements"
                    />
                  </li>
                ) : (
                  ''
                )}
              </ul>
            </Col>
            <Col lg={6} md={6} sm={6}>
              <DashboardToggleView />
            </Col>
          </Row>
          <div className="grid-view">
            {tileView ? (
              <AnnouncementGridView announcements={announcements} />
            ) : (
              ''
            )}
            {tableView ? (
              <AnnouncementsTableView
                loggedInUser={loggedInUser}
                animalSpecies={animalSpecies}
                attributes={attributes}
                announcements={announcements}
                changeParentState={obj => this.changeParentState(obj)}
                selection={this.state.selection}
                selectAll={this.state.selectAll}
                selectedRowData={this.state.selectedRowData}
              />
            ) : (
              ''
            )}
          </div>
        </div>
        <FormDialog
          open={openCreateAnnouncement}
          onClose={() => this.setState({ openCreateAnnouncement: false })}
          formTitle="Create Announcement"
          // formContent={
          //   <CreateAnnouncement
          //     animalSpecies={animalSpecies}
          //     attributes={attributes}
          //     cartData={cartData}
          //     animalOptions={animalOptions}
          //     incrementCart={this.incrementCart}
          //     selectSpecie={this.selectSpecie}
          //     textOnBlur={this.textOnBlur}
          //     decrementCart={this.decrementCart}
          //     attributesCart={attributesCart}
          //     attributeOptions={attributeOptions}
          //     incrementAttributeCart={this.incrementAttributeCart}
          //     selectAttribute={this.selectAttribute}
          //     // attributeTextOnBlur={this.attributeTextOnBlur}
          //     attributeValuesOnBlur={this.attributeValuesOnBlur}
          //     decrementAttributeCart={this.decrementAttributeCart}
          //     announcementName={this.announcementName}
          //   />
          // }
          formContent={
            <CreateNewAnnoumcements
              animalSpecies={animalSpecies}
              announcementData={announcementData}
              attributes={attributes}
              cartData={cartData}
              methodsData={methodsData}
              paramsData={paramsData}
              animalOptions={animalOptions}
              incrementCart={() => this.incrementCart(animalOptions)}
              selectSpecie={this.selectSpecie}
              textOnBlur={this.textOnBlur}
              decrementCart={this.decrementCart}
              attributesCart={attributesCart}
              attributeOptions={attributeOptions}
              incrementAttributeCart={this.incrementAttributeCart}
              selectAttribute={this.selectAttribute}
              // attributeTextOnBlur={this.attributeTextOnBlur}
              attributeValuesOnBlur={this.attributeValuesOnBlur}
              decrementAttributeCart={this.decrementAttributeCart}
              announcementName={this.announcementName}
              incrementMethodsCart={this.incrementMethodsCart}
              incrementParametersCart={() => this.incrementParametersCart(attributeOptions)}
              changeParentState={obj => this.changeParentState(obj)}
              selection={this.state.selection}
              selectAll={this.state.selectAll}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.onSubmit}
        />
        <FormDialog
          open={this.state.openEditAnnouncement}
          onClose={() => this.setState({ openEditAnnouncement: false })}
          formTitle="Edit Announcement"
          formContent={
            <CreateAnnouncement
              animalSpecies={animalSpecies}
              attributes={attributes}
              cartData={cartData}
              animalOptions={animalOptions}
              incrementCart={this.incrementCart}
              selectSpecie={this.selectSpecie}
              textOnBlur={this.textOnBlur}
              decrementCart={this.decrementCart}
              attributesCart={attributesCart}
              attributeOptions={attributeOptions}
              incrementAttributeCart={this.incrementAttributeCart}
              selectAttribute={this.selectAttribute}
              // attributeTextOnBlur={this.attributeTextOnBlur}
              attributeValuesOnBlur={this.attributeValuesOnBlur}
              decrementAttributeCart={this.decrementAttributeCart}
              announcementName={this.announcementName}
              edit
              anncmentName={this.state.announcementName}
              selectAnncmntStatus={e =>
                this.setState({ selectedStatusOnEdit: e })
              }
              selectedStatusOnEdit={this.state.selectedStatusOnEdit}
            />
          }
          disableSubmit={disableSubmit}
          onSubmit={this.onSubmitEdit}
        />
        <MyLargeModal
          show={this.state.openViewAnnouncement}
          onHide={() => this.setState({ openViewAnnouncement: false })}
          header={`View ${this.state.selectedRowData.name}`}
        >
          <ViewAnnouncements
            selectedRowData={this.state.selectedRowData}
            animalColumns={announcemetAnimalColumns}
            attributesColumns={announcemetAttributeColumns}
          />
        </MyLargeModal>
        <SnackBar
          open={this.props.snackBarOpen}
          onClose={() =>
            this.props.dispatch(
              handleSnackBar({ snackBarOpen: false, snackBarMsg: '' })
            )
          }
          msg={this.props.snackBarMsg}
        />
      </div>
    );
  }
}

const mapStateToProps = state => ({
  loggedInUser: state.login.loggedInUser,
  currentView: state.dashboard.currentView,
  animalSpecies: state.animalsReducer.animalSpecies,
  attributes: state.animalsReducer.attributes,
  snackBarOpen: state.dashboard.snackBarOpen,
  snackBarMsg: state.dashboard.snackBarMsg,
  announcements: state.animalsReducer.announcements
});

export default connect(mapStateToProps)(Announcements);
