import {
  AnimalsType,
  AnimalSpecieType,
  AttributeType,
  AnnouncementType
  // AnimalGroupType
} from '../actions/ActionType';

const initialState = {
  animals: [],
  animalSpecies: [],
  labAnimals: [],
  animalsStats: [],
  animalGroups: [],
  animalStatuses: [],
  attributes: [],
  announcements: []
};

const generateStatusName = (animalStatuses, obtainedStatusID) => {
  const objectId = '_id';
  let statusName = '';
  animalStatuses.map(statuses => {
    if (obtainedStatusID[0]) {
      if (obtainedStatusID[0] === statuses[objectId]) {
        statusName = statuses.name;
      }
    }
    return null;
  });
  return statusName;
};

const createAnimalStats = (animalStats, animalStatuses) => {
  const objectId = '_id';
  const statsObj = {};
  Object.keys(animalStats).map(key => {
    animalStats[key].map(anml => {
      if (statsObj[anml[objectId].species] === undefined) {
        statsObj[anml[objectId].species] = {};
      }
      const statusName = generateStatusName(animalStatuses, [
        anml[objectId].status
      ]);
      if ([anml[objectId].gender][0]) {
        statsObj[anml[objectId].species][anml[objectId].gender] = anml.count;
      }
      if ([anml[objectId].status][0]) {
        statsObj[anml[objectId].species][statusName] = anml.count;
      }
      return false;
    });
    return statsObj;
  });
  return statsObj;
};

export default function reducer(state = initialState, action) {
  let st = state;
  switch (action.type) {
    case AnimalsType.ERROR_LOG: {
      st = {
        ...state,
        message: 'Error.'
      };
      break;
    }
    case AnimalsType.FETCHED_ANIMALS: {
      const animalStats = createAnimalStats(
        action.payload.animalsStats,
        action.payload.animalStatuses
      );
      st = {
        ...state,
        animals: action.payload.animals,
        animalSpecies: action.payload.animalspecies,
        animalsStats: animalStats,
        animalGroups: action.payload.animalGroups,
        attributes: action.payload.attributes,
        announcements: action.payload.announcements,
        animalStatuses: action.payload.animalStatuses
      };
      break;
    }

    case AnimalsType.FETCHED_LAB_ANIMALS: {
      st = {
        ...state,
        labAnimals: action.payload
      };
      break;
    }

    case AnimalSpecieType.CREATE_ANIMALSPECIE: {
      const { animalSpecies } = st;
      const updatedAnimalSpecies = animalSpecies.concat(action.payload.data);
      st = {
        ...state,
        animalSpecies: updatedAnimalSpecies
      };
      break;
    }

    case AttributeType.CREATE_ATTRIBUTE: {
      st = {
        ...state,
        attributes: action.payload
      };
      break;
    }
    case AnnouncementType.CREATE_ANNOUNCEMENT: {
      st = {
        ...state,
        announcements: action.payload
      };
      break;
    }
    // case AnimalGroupType.CREATE_STUDY: {
    //   st = {
    //     ...state,
    //     animalGroups: action.payload
    //   };
    //   break;
    // }

    case AnimalsType.UPDATED_ANIMALS_DATA: {
      st = {
        ...state,
        animals: action.payload
      };
      break;
    }

    default: {
      return st;
    }
  }
  return st;
}
